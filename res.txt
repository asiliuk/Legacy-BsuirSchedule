//
//  BSAchivement.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 05.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivement.h"
#import "FXKeychain.h"

@implementation BSAchivement
@dynamic unlocked;

- (instancetype)initWithName:(NSString *)name
                 description:(NSString *)description
                   imageName:(NSString *)imageName
               achivementKey:(NSString *)achivementKey {
    self = [super init];
    if (self) {
        _name = name;
        _achivementDescription = description;
        _imageName = imageName;
        _achivementKey = achivementKey;
    }
    return self;
}

static NSString * const contourPostfix = @"_contour";
- (UIImage*)image {
    NSString *imageName = self.imageName;
    if (!self.unlocked) {
        imageName = [imageName stringByAppendingString:contourPostfix];
    }
    return [UIImage imageNamed:imageName];
}
- (BOOL)trigger {
    return NO;
}
- (BOOL)unlocked {
    return NO;
}

@end
//
//  BSAchivementManager.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 05.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivementManager.h"

#import "BSAchivementNumeric.h"

#import "BSSocialAchivement.h"
#import "BSPurchaseAchivement.h"

#import "BSConstants.h"
#import "FXKeychain.h"

@interface BSAchivementManager()
@property (strong, nonatomic) NSDictionary *achivementsData;
@end
@implementation BSAchivementManager

+ (instancetype)sharedInstance {
    
    static id sharedObject = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        sharedObject = [[super allocWithZone:NULL] init];
    });
    return sharedObject;
}

+ (id)allocWithZone:(struct _NSZone *)zone {
    
    return [[self class] sharedInstance];
}

//===============================================GETTERS===========================================
#pragma mark - Getters

- (NSDictionary*)achivementsData {
    if (!_achivementsData) {
        NSMutableDictionary *achivementsData = [NSMutableDictionary dictionary];
        
        BSAchivementOnce *scroller = [[BSAchivementOnce alloc] initWithName:LZD(@"L_ScrollerAchivement")
                                                                description:LZD(@"L_ScrollerAchivementDescription")
                                                                  imageName:@"scroller"
                                                              achivementKey:[self keyForAchivementType:BSAchivementTypeScroller]];
        achivementsData[@(BSAchivementTypeScroller)] = scroller;
        
        BSSocialAchivement *social = [[BSSocialAchivement alloc] initWithName:LZD(@"L_SocialAchivement")
                                                                description:LZD(@"L_SocialAchivementDescription")
                                                                  imageName:@"social"
                                                              achivementKey:[self keyForAchivementType:BSAchivementTypeSocial]
                                                                    shareText:LZD(@"L_AppShare")];
        achivementsData[@(BSAchivementTypeSocial)] = social;
        
        NSInteger watcherPhotoCount = 200;
        BSAchivementNumeric *watcher = [[BSAchivementNumeric alloc] initWithName:LZD(@"L_WatcherAchivement")
                                                                     description:[NSString stringWithFormat:LZD(@"L_WatcherAchivementDescription"),
                                                                                  (long)watcherPhotoCount]
                                                                       imageName:@"watcher"
                                                                   achivementKey:[self keyForAchivementType:BSAchivementTypeWatcher]
                                                                        triggerCount:watcherPhotoCount];
        achivementsData[@(BSAchivementTypeWatcher)] = watcher;
        
        BSAchivementOnce *werewolf = [[BSAchivementOnce alloc] initWithName:LZD(@"L_WerewolfAchivement")
                                                                 description:LZD(@"L_WerewolfAchivementDescription")
                                                                   imageName:@"werewolf"
                                                               achivementKey:[self keyForAchivementType:BSAchivementTypeWerewolf]];
        achivementsData[@(BSAchivementTypeWerewolf)] = werewolf;
        
        BSAchivementOnce *supporter = [[BSPurchaseAchivement alloc] initWithName:LZD(@"L_SupporterAchivement")
                                                                     description:LZD(@"L_SupporterAchivementDescription")
                                                                       imageName:@"supporter"
                                                                   achivementKey:[self keyForAchivementType:BSAchivementTypeSupporter]
                                                                      purchaseID:kSupporterAchivementID];
        achivementsData[@(BSAchivementTypeSupporter)] = supporter;
        
        BSAchivementOnce *superSupporter = [[BSPurchaseAchivement alloc] initWithName:LZD(@"L_SuperSupporterAchivement")
                                                                          description:LZD(@"L_SuperSupporterAchivementDescription")
                                                                            imageName:@"super_supporter"
                                                                        achivementKey:[self keyForAchivementType:BSAchivementTypeSuperSupporter]
                                                                           purchaseID:kSuperSupporterAchivementID];
        achivementsData[@(BSAchivementTypeSuperSupporter)] = superSupporter;
        
        _achivementsData = [NSDictionary dictionaryWithDictionary:achivementsData];
    }
    return _achivementsData;
}
- (NSArray*)achivements {
    if (!_achivements) {
        NSMutableArray *achivements = [NSMutableArray array];
        NSArray *achivementsTypes = @[@(BSAchivementTypeScroller), @(BSAchivementTypeWatcher),
                                      @(BSAchivementTypeWerewolf), @(BSAchivementTypeSocial),
                                      @(BSAchivementTypeSupporter), @(BSAchivementTypeSuperSupporter)];
        for (NSNumber *achivementType in achivementsTypes) {
            [achivements addObject:self.achivementsData[achivementType]];
        }
        _achivements = [NSArray arrayWithArray:achivements];
    }
    return _achivements;
}

//===============================================METHODS===========================================
#pragma mark - Methods

- (BSAchivement*)achivementWithType:(BSAchivementType)achivementType {
    return [self.achivementsData objectForKey:@(achivementType)];
}

- (BOOL)triggerAchivementWithType:(BSAchivementType)achivementType {
    BSAchivement *achivement = [self achivementWithType:achivementType];
    BOOL achivementTriggered = [achivement trigger];
    if (achivementTriggered) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kAchivementUnlocked object:nil userInfo:nil];
    }
    return achivementTriggered;
}

- (NSString*)keyForAchivementType:(BSAchivementType)achivementType {
    NSString *achivementKey;
    switch (achivementType) {
        case BSAchivementTypeScroller:
            achivementKey = @"BSAchivementTypeScroller";
            break;
        case BSAchivementTypeSocial:
            achivementKey = @"BSAchivementTypeSocial";
            break;
        case BSAchivementTypeWatcher:
            achivementKey = @"BSAchivementTypeWatcher";
            break;
        case BSAchivementTypeWerewolf:
            achivementKey = @"BSAchivementTypeWherewolf";
            break;
        case BSAchivementTypeSupporter:
            achivementKey = @"BSAchivementTypeSupporter";
            break;
        case BSAchivementTypeSuperSupporter:
            achivementKey = @"BSAchivementTypeSuperSupporter";
            break;
        default:
            achivementKey = @"unknown";
            break;
    }
    return achivementKey;
}

- (void)dismissAllAchivements {
    for (NSNumber *ach in @[@(BSAchivementTypeScroller), @(BSAchivementTypeWatcher),
                            @(BSAchivementTypeWerewolf), @(BSAchivementTypeSocial),
                            @(BSAchivementTypeSupporter), @(BSAchivementTypeSuperSupporter)]) {
        [[FXKeychain defaultKeychain] setObject:@(0) forKey:[self keyForAchivementType:[ach integerValue]]];
    }
}

@end
//
//  BSAchivementNumeric.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 05.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivementNumeric.h"
#import "FXKeychain.h"


@interface BSAchivementNumeric()
@property (nonatomic) NSInteger triggerCount;
@end

@implementation BSAchivementNumeric
- (instancetype)initWithName:(NSString *)name
                 description:(NSString *)description
                   imageName:(NSString *)imageName
               achivementKey:(NSString *)achivementKey
                triggerCount:(NSInteger)triggerCount
{
    self = [super initWithName:name description:description imageName:imageName achivementKey:achivementKey];
    if (self) {
        _triggerCount = triggerCount;
    }
    return self;
}

- (NSString*)achivementDescription {
    NSString *descr = [super achivementDescription];
    if (![self unlocked]) {
        NSString *triggersStr = [NSString stringWithFormat:@" (%ld/%ld)", (long)[self currentTriggerCount], (long)self.triggerCount];
        descr = [descr stringByAppendingString:triggersStr];
    }
    return descr;
}
- (NSInteger)currentTriggerCount {
    return [[[FXKeychain defaultKeychain] objectForKey:self.achivementKey] integerValue];
}
- (BOOL)trigger {
    BOOL getTriggered = NO;
    if (![self unlocked]) {
        NSInteger currentTriggerCount = [self currentTriggerCount];
        currentTriggerCount++;
        [[FXKeychain defaultKeychain] setObject:@(currentTriggerCount) forKey:self.achivementKey];
        getTriggered = currentTriggerCount >= self.triggerCount;
    }
    return getTriggered;
}
- (BOOL)unlocked {
    return [self currentTriggerCount] >= self.triggerCount;
}
@end
//
//  BSAchivementOnce.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 05.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivementOnce.h"
#import "FXKeychain.h"

@implementation BSAchivementOnce

- (BOOL)trigger {
    BOOL getTriggered = NO;
    if (![self unlocked]) {
        getTriggered = YES;
        [[FXKeychain defaultKeychain] setObject:@(YES) forKey:self.achivementKey];
    }
    return getTriggered;
}

- (BOOL)unlocked {
    return [[[FXKeychain defaultKeychain] objectForKey:self.achivementKey] boolValue];
}
@end
//
//  BSPurchaseAchivement.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 08.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSPurchaseAchivement.h"

@implementation BSPurchaseAchivement

- (instancetype)initWithName:(NSString *)name
                 description:(NSString *)description
                   imageName:(NSString *)imageName
               achivementKey:(NSString *)achivementKey
                   purchaseID:(NSString *)purchaseID
{
    self = [super initWithName:name description:description imageName:imageName achivementKey:achivementKey];
    if (self) {
        _purchaseID = purchaseID;
    }
    return self;
}
@end
//
//  BSSocialAchivement.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 06.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSSocialAchivement.h"

@implementation BSSocialAchivement
- (instancetype)initWithName:(NSString *)name
                 description:(NSString *)description
                   imageName:(NSString *)imageName
               achivementKey:(NSString *)achivementKey
                   shareText:(NSString *)shareText
{
    self = [super initWithName:name description:description imageName:imageName achivementKey:achivementKey];
    if (self) {
        _shareText = shareText;
    }
    return self;
}

@end
//
//  DataManager.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 16.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSDataManager.h"
#import "AppDelegate.h"
#import "XMLDictionary.h"
#import "BSConstants.h"
#import "NSDate+Compare.h"
#import "NSUserDefaults+Share.h"
#import "BSDayOfWeek+Number.h"
#import <NotificationCenter/NotificationCenter.h>

@interface BSDataManager()
@property (strong, nonatomic) NSArray *weekDays;
@end
@implementation BSDataManager

+ (instancetype)sharedInstance {
    
    static id sharedObject = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        sharedObject = [[super allocWithZone:NULL] init];
    });
    return sharedObject;
}

+ (id)allocWithZone:(struct _NSZone *)zone {
    
    return [[self class] sharedInstance];
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.weekDays = @[@"Воскресенье", @"Понедельник", @"Вторник", @"Среда", @"Четверг", @"Пятница", @"Суббота"];
    }
    return self;
}

#define MAX_INTERVAL_TO_HIGHLIGHT 20
- (BSDayWithWeekNum*)dayToHighlightInSchedule:(BSSchedule *)schedule weekMode:(BOOL)weekMode {
    BSDayWithWeekNum *dayToHighlight;
    NSDate *now = [NSDate date];
    for (NSInteger dayIndex = 0; dayIndex < MAX_INTERVAL_TO_HIGHLIGHT; dayIndex++) {
        NSDate *dayDate = [now dateByAddingTimeInterval:DAY_IN_SECONDS*dayIndex];
        BSDayWithWeekNum *dayWithWeekNum = [[BSDayWithWeekNum alloc] initWithDate:dayDate];
        if (dayWithWeekNum && [[dayWithWeekNum pairsForSchedule:schedule weekFormat:weekMode] count] > 0) {
            BOOL today = [now isEqual:dayDate];
            NSArray *pairs = [dayWithWeekNum pairsForSchedule:schedule weekFormat:weekMode];
            NSDate *todayLastPairEnd = [[pairs lastObject] endTime]; //need pairs of 'today' to highlight tomorrow section header
            BOOL todayPairsEnded = [todayLastPairEnd compareTime:now] == NSOrderedAscending || [dayWithWeekNum.pairs count] == 0;
            if (!(today && (todayPairsEnded || dayWithWeekNum.dayOfWeek == nil))) {
                    dayToHighlight = dayWithWeekNum;
                    break;
    
            }
        }
    }
    return dayToHighlight;
}

//===============================================SCHEDULE===========================================
#pragma mark - Schedule

- (NSArray*)schelules {
    NSSortDescriptor *creationSort = [NSSortDescriptor sortDescriptorWithKey:@"createdAt" ascending:YES];
    NSSortDescriptor *nameSort = [NSSortDescriptor sortDescriptorWithKey:@"group.groupNumber" ascending:YES];
    NSFetchRequest *schedulesRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSSchedule class])];
    schedulesRequest.sortDescriptors = @[creationSort, nameSort];
    return [self.managedObjectContext executeFetchRequest:schedulesRequest error:nil];
}

- (void)deleteSchedule:(BSSchedule *)schedule {
    BSGroup *group = schedule.group;
    if ([self.currentWidgetSchedule isEqual:schedule]) {
        self.currentWidgetSchedule = [[self schelules] firstObject];
    }
    [self.managedObjectContext deleteObject:schedule];

    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:NSStringFromClass([BSSchedule class])];
    NSPredicate *schedulePredicate = [NSPredicate predicateWithFormat:@"group.groupNumber == %@",schedule.group.groupNumber];
    request.predicate = schedulePredicate;
    NSError *error;
    NSArray *results = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in schedule fetch: %@", error.localizedDescription);
    } else if (!results || [results count] == 0) {
        [self resetSceduleForGroup:group];
        [self.managedObjectContext deleteObject:group];
    }

    [[NSNotificationCenter defaultCenter] postNotificationName:kSchedulesGetUpdated object:nil];
}

- (BSSchedule*)scheduleWithGroupNumber:(NSString*)groupNumber andSubgroup:(NSInteger)subgroup createIfNotExists:(BOOL)createIfNotExists {
    BSGroup *group = [self groupWithNumber:groupNumber createIfNotExists:YES];
    return  [self scheduleWithGroup:group andSubgroup:subgroup createIfNotExists:createIfNotExists];
}
- (BSSchedule*)scheduleWithGroup:(BSGroup*)group andSubgroup:(NSInteger)subgroup createIfNotExists:(BOOL)createIfNotExists {
    BSSchedule *schedule;
    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:NSStringFromClass([BSSchedule class])];
    NSPredicate *schedulePredicate = [NSPredicate predicateWithFormat:@"group.groupNumber == %@ AND subgroup == %@",group.groupNumber, @(subgroup)];
    request.predicate = schedulePredicate;
    NSError *error;
    NSArray *results = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in schedule fetch: %@", error.localizedDescription);
    }else if ([results count] > 0) {
        schedule = [results lastObject];
    } else if (createIfNotExists) {
        schedule = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSSchedule class]) inManagedObjectContext:self.managedObjectContext];
        schedule.group = group;
        schedule.subgroup = @(subgroup);
        schedule.createdAt = [NSDate date];
        [[NSNotificationCenter defaultCenter] postNotificationName:kSchedulesGetUpdated object:nil];
    }
    return schedule;
}
@dynamic currentWidgetSchedule;
- (BSSchedule*)currentWidgetSchedule {
    NSString *widgetGroup = [[NSUserDefaults sharedDefaults] objectForKey:kWidgetGroup];
    NSNumber *widgetSubgroup = [[NSUserDefaults sharedDefaults] objectForKey:kWidgetSubgroup];
    return [self scheduleWithGroupNumber:widgetGroup andSubgroup:[widgetSubgroup integerValue] createIfNotExists:NO];
}

- (void)setCurrentWidgetSchedule:(BSSchedule *)currentWidgetSchedule {
    if ([currentWidgetSchedule.group.pairs count] > 0) {
        NCWidgetController *widgetController = [[NCWidgetController alloc] init];
        [widgetController setHasContent:YES forWidgetWithBundleIdentifier:kWidgetID];
    }
    [[NSUserDefaults sharedDefaults] setObject:(currentWidgetSchedule.group.groupNumber) ?
                                                currentWidgetSchedule.group.groupNumber :
                                                @""
                                        forKey:kWidgetGroup];
    [[NSUserDefaults sharedDefaults] setObject:(currentWidgetSchedule.subgroup) ?
                                                currentWidgetSchedule.subgroup :
                                                @""
                                        forKey:kWidgetSubgroup];
    
}
//===============================================GROUP===========================================
#pragma mark - Group

- (NSArray*)groups {
    NSFetchRequest *groupsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSGroup class])];
    return [self.managedObjectContext executeFetchRequest:groupsRequest error:nil];
}

- (BSGroup*)groupWithNumber:(NSString *)number createIfNotExists:(BOOL)createIfNotExists {
    BSGroup *group;
    if (number && [number isKindOfClass:[NSString class]]) {
        NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSGroup class])];
        NSPredicate *numberPredicate = [NSPredicate predicateWithFormat:@"groupNumber == %@", number];
        request.predicate = numberPredicate;
        NSError *error;
        NSArray *results = [self.managedObjectContext executeFetchRequest:request error:&error];
        if (error) {
            NSLog(@"Error in group fetch: %@", error.localizedDescription);
        }else if ([results count] > 0) {
            group = [results lastObject];
        } else if (createIfNotExists) {
            group = [self addGroupWithNumber:number];
        }
    }
    return group;
}

- (BSGroup*)addGroupWithNumber:(NSString*)number {
    BSGroup *group = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSGroup class]) inManagedObjectContext:self.managedObjectContext];
    group.groupNumber = number;
    return group;
}

//===============================================SUBJECT===========================================
#pragma mark - Subject

- (NSArray*)subjects {
    NSFetchRequest *subjectsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSSubject class])];
    return [self.managedObjectContext executeFetchRequest:subjectsRequest error:nil];
}

- (BSSubject*)subjectWithName:(NSString *)name createIfNotExists:(BOOL)createIfNotExists{
    BSSubject *subject;
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSSubject class])];
    NSPredicate *namePredicate = [NSPredicate predicateWithFormat:@"name == %@", name];
    request.predicate = namePredicate;
    NSError *error;
    NSArray *results = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in subject fetch: %@", error.localizedDescription);
    }else if ([results count] > 0) {
        subject = [results lastObject];
    } else if (createIfNotExists) {
        subject = [self addSubjectWithName:name];
    }
    return subject;
}

- (BSSubject*)addSubjectWithName:(NSString *)name {
    BSSubject *subject = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSSubject class]) inManagedObjectContext:self.managedObjectContext];
    subject.name = name;
    return subject;
}

//===============================================LECTURER===========================================
#pragma mark - Lecturer

- (NSArray*)lectures {
    NSFetchRequest *lecturesRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSLecturer class])];
    return [self.managedObjectContext executeFetchRequest:lecturesRequest error:nil];
}

- (BSLecturer*)lecturerWithID:(NSInteger)lecturerID {
    NSPredicate *idPredicate = [NSPredicate predicateWithFormat:@"lecturerID == %@", @(lecturerID)];
    return [self lecturerWithPredicate:idPredicate];
}

- (BSLecturer*)lecturerWithFirstName:(NSString *)firstName
                         midleName:(NSString *)middleName
                          lastName:(NSString *)lastName{
    NSPredicate *lecturerPredicate = [NSPredicate predicateWithFormat:@"firstName == %@ AND middleName == %@ AND lastName == %@", firstName, middleName, lastName];
    return [self lecturerWithPredicate:lecturerPredicate];
}

- (BSLecturer*)lecturerWithPredicate:(NSPredicate*)predicate {
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSLecturer class])];
    request.predicate = predicate;
    BSLecturer *lecturer;
    NSError *error;
    NSArray *lecturers = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in lectures fetch: %@", error.localizedDescription);
    } else if ([lecturers count] > 0) {
        lecturer = [lecturers lastObject];
    }
    return lecturer;
}


- (BSLecturer*)addLecturerWithFirstName:(NSString *)firstName
                            midleName:(NSString *)middleName
                             lastName:(NSString *)lastName
                           department:(NSString *)department
                           lecturerID:(NSInteger)lecturerID
{
    BSLecturer *lecturer = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSLecturer class]) inManagedObjectContext:self.managedObjectContext];
    lecturer.firstName = firstName;
    lecturer.middleName = middleName;
    lecturer.lastName = lastName;
    lecturer.lecturerID = @(lecturerID);
    lecturer.academicDepartment = department;
    return lecturer;
}

//===============================================DAY===========================================
#pragma mark - Day

- (NSArray*)days {
    NSFetchRequest *daysRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSDayOfWeek class])];
    [daysRequest setReturnsObjectsAsFaults:NO];
    [daysRequest setRelationshipKeyPathsForPrefetching:[NSArray arrayWithObjects:@"pairs", nil]];
    NSArray *days = [self.managedObjectContext executeFetchRequest:daysRequest error:nil];
    NSArray *sortedDays = [days sortedArrayUsingComparator:^NSComparisonResult(BSDayOfWeek* obj1, BSDayOfWeek* obj2) {
        return [[self dayNumberForDay:obj1] compare:[self dayNumberForDay:obj2]];
    }];
    return sortedDays;
}

- (NSNumber*)dayNumberForDay:(BSDayOfWeek*)dayOfWeek {
    NSArray *dayOrder = @[@"Понедельник", @"Вторник", @"Среда", @"Четверг", @"Пятница", @"Суббота", @"Воскресенье"];
    return @([dayOrder indexOfObject:dayOfWeek.name]);

}

- (BSDayOfWeek*)dayWithIndex:(NSInteger)dayIndex createIfNotExists:(BOOL)createIfNotExists {
    return [self dayWithName:[self.weekDays objectAtIndex:dayIndex] createIfNotExists:createIfNotExists];
}

- (BSDayOfWeek*)dayWithDate:(NSDate*)date {
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSCalendarUnit calendarUnits = NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear | NSCalendarUnitWeekday;
    NSDateComponents *dateComponents = [gregorian components:calendarUnits fromDate:date];
    return [self dayWithIndex:([dateComponents weekday]-1) createIfNotExists:NO];
}

- (BSDayOfWeek*)dayWithName:(NSString *)dayName createIfNotExists:(BOOL)createIfNotExists{
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSDayOfWeek class])];
    request.predicate = [NSPredicate predicateWithFormat:@"name == %@", dayName];
    BSDayOfWeek *day;
    NSError *error;
    NSArray *days = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in days fetch: %@", error.localizedDescription);
    } else if ([days count] > 0) {
        day = [days lastObject];
    } else if (createIfNotExists) {
        day = [self addDayWithName:dayName];
    }
    return day;
}

- (BSDayOfWeek*)addDayWithName:(NSString *)dayName {
    BSDayOfWeek *day = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSDayOfWeek class]) inManagedObjectContext:self.managedObjectContext];
    day.name = dayName;
    return day;
}

- (NSInteger)indexForDayName:(NSString *)dayName {
    return [self.weekDays indexOfObject:dayName];
}

//===============================================AUDITORY===========================================
#pragma mark - Auditory

- (NSArray*)auditories {
    NSFetchRequest *auditoriesRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSAuditory class])];
    return [self.managedObjectContext executeFetchRequest:auditoriesRequest error:nil];
}

- (BSAuditory*)auditoryWithAddress:(NSString *)address createIfNotExists:(BOOL)createIfNotExists {
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSAuditory class])];
    request.predicate = [NSPredicate predicateWithFormat:@"address == %@", address];
    BSAuditory *auditory;
    NSError *error;
    NSArray *auditories = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in auditory fetch: %@", error.localizedDescription);
    } else if ([auditories count] > 0) {
        auditory = [auditories lastObject];
    } else if (createIfNotExists) {
        auditory = [self addAuditoryWithAddress:address];
    }
    return auditory;
}

- (BSAuditory*)addAuditoryWithAddress:(NSString *)address {
    BSAuditory *auditory = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSAuditory class]) inManagedObjectContext:self.managedObjectContext];
    auditory.address = address;
    return auditory;
}

//===============================================PAIR===========================================
#pragma mark - Pair

- (NSArray*)pairs {
    NSFetchRequest *pairsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSPair class])];
    return [self.managedObjectContext executeFetchRequest:pairsRequest error:nil];
}

- (NSArray*)sortPairs:(NSArray *)pairs {
    NSSortDescriptor *sortD = [NSSortDescriptor sortDescriptorWithKey:@"startTime" ascending:YES];
    NSSortDescriptor *nameSort = [NSSortDescriptor sortDescriptorWithKey:@"subject.name" ascending:YES];
    NSSortDescriptor *weekSort = [NSSortDescriptor sortDescriptorWithKey:@"weeks" ascending:YES comparator:^NSComparisonResult(id obj1, id obj2) {
        NSComparisonResult compRes = NSOrderedSame;
        if ([obj1 isKindOfClass:[NSSet class]] && [obj2 isKindOfClass:[NSSet class]]) {
            NSSet *weeks1 = obj1;
            NSSet *weeks2 = obj2;
            NSSortDescriptor *weekNumSort = [NSSortDescriptor sortDescriptorWithKey:@"weekNumber" ascending:YES];
            BSWeekNumber *week1 = [[weeks1 sortedArrayUsingDescriptors:@[weekNumSort]] firstObject];
            BSWeekNumber *week2 = [[weeks2 sortedArrayUsingDescriptors:@[weekNumSort]] firstObject];
            compRes = [week1.weekNumber compare:week2.weekNumber];
        }
        return compRes;
    }];
    return [pairs sortedArrayUsingDescriptors:@[sortD, weekSort, nameSort]];
}

- (BSPair*)pairWithStartTime:(NSDate *)startTime
                     endTime:(NSDate *)endTime
              subgroupNumber:(NSInteger)subgroupNumber
                pairTypeName:(NSString *)pairTypeName
                inAuditories:(NSArray *)auditories
                       atDay:(BSDayOfWeek *)day
                     subject:(BSSubject *)subject
                   lecturers:(NSArray *)lecturers
                       weeks:(NSSet *)weeks
                       group:(BSGroup *)group
           createIfNotExists:(BOOL)createIfNotExists
{
    BSPair *pair;
    PairType pairType = [BSPair pairTypeWithName:pairTypeName];
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSPair class])];
    NSPredicate *pairPredicate = [NSPredicate predicateWithFormat:@"startTime == %@ AND endTime == %@ \
                                  AND subgroupNumber == %@ AND pairType == %d \
                                  AND auditories contains[c] %@ AND day == %@ \
                                  AND subject == %@ AND weeks contains[c] %@",
                                  startTime, endTime,
                                  @(subgroupNumber), pairType,
                                  auditories, day,
                                  subject, weeks];
    request.predicate = pairPredicate;
    
    NSError *error;
    NSArray *pairs = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in pairs fetch: %@", error.localizedDescription);
    } else if (pairs && [pairs count] > 0) {
        pair = [pairs lastObject];
    } else if (createIfNotExists) {
        pair = [self addPairWithStartTime:startTime
                                  endTime:endTime
                           subgroupNumber:subgroupNumber
                             pairTypeName:pairTypeName
                             inAuditories:auditories
                                    atDay:day
                                  subject:subject
                                lecturers:lecturers
                                    weeks:weeks
                                    group:group];
    }
    return pair;
}

- (BSPair*)addPairWithStartTime:(NSDate *)startTime
                        endTime:(NSDate *)endTime
                 subgroupNumber:(NSInteger)subgroupNumber
                   pairTypeName:(NSString*)pairTypeName
                   inAuditories:(NSArray *)auditories
                          atDay:(BSDayOfWeek *)day
                        subject:(BSSubject *)subject
                      lecturers:(NSArray *)lecturers
                          weeks:(NSSet *)weeks
                          group:(BSGroup *)group
{
    BSPair *pair;
    PairType pairType = [BSPair pairTypeWithName:pairTypeName];
    pair = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSPair class]) inManagedObjectContext:self.managedObjectContext];
    pair.startTime = startTime;
    pair.endTime = endTime;
    pair.subgroupNumber = @(subgroupNumber);
    pair.pairType = @(pairType);
    [pair addAuditories:[NSSet setWithArray:auditories]];
    pair.day = day;
    pair.subject = subject;
    pair.lecturers = [NSSet setWithArray:lecturers];
    [pair addWeeks:weeks];
    [pair addGroupsObject:group];
    return pair;
}

- (NSArray*)filterPairs:(NSArray*)pairs forSchedule:(BSSchedule*)schedule forWekFormat:(BOOL)weekFormat {
    BSGroup *group = schedule.group;
    NSNumber *subgroup = schedule.subgroup;
    NSPredicate *pairPredicate = [NSPredicate predicateWithBlock:^BOOL(BSPair* evaluatedObject, NSDictionary *bindings) {
        BOOL filter = [evaluatedObject.groups containsObject:group];
        if (!weekFormat) {
            filter = filter && ([evaluatedObject.subgroupNumber isEqual:@(0)] || [evaluatedObject.subgroupNumber isEqual:subgroup]);
        }
        return filter;
    }];
    
    
    return [pairs filteredArrayUsingPredicate:pairPredicate];
}

//===============================================WEEKNUMBERS===========================================
#pragma mark - Week Numbers

- (NSArray*)weekNumbers {
    NSFetchRequest *weekNumbersRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSWeekNumber class])];
    NSError *error;
    NSArray *weekNumbers = [self.managedObjectContext executeFetchRequest:weekNumbersRequest error:&error];
    if (error) {
        NSLog(@"Error in fetch week numbers %@", error.localizedDescription);
    }
    return weekNumbers;
}

- (BSWeekNumber*)weekNumberWithNumber:(NSInteger)weekNumber createIfNotExists:(BOOL)createIfNotExists {
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSWeekNumber class])];
    request.predicate = [NSPredicate predicateWithFormat:@"weekNumber == %@", @(weekNumber)];
    BSWeekNumber *weekNumberObj;
    NSError *error;
    NSArray *weekNumbers = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in auditory fetch: %@", error.localizedDescription);
    } else if ([weekNumbers count] > 0) {
        weekNumberObj = [weekNumbers lastObject];
    } else if (createIfNotExists) {
        weekNumberObj = [self addWeekNumberWithNumber:weekNumber];
    }
    return weekNumberObj;
}

- (BSWeekNumber*)addWeekNumberWithNumber:(NSInteger)weekNumber {
    BSWeekNumber *weekNumberObj = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSWeekNumber class]) inManagedObjectContext:self.managedObjectContext];
    weekNumberObj.weekNumber = @(weekNumber);
    return weekNumberObj;
}

- (BSWeekNumber*)currentWeek {
    return [self weekNumberWithDate:[NSDate date]];
}

#define START_DAY 1
#define START_MONTH 9

#define END_DAY 1
#define END_MONTH 7


- (BSWeekNumber*)weekNumberWithDate:(NSDate *)date {
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSCalendarUnit calendarUnits = NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear | NSCalendarUnitWeekday;
    NSDateComponents *dateComponents = [gregorian components:calendarUnits fromDate:date];
    dateComponents.day -= [dateComponents weekday];
    
    NSDateComponents *lastDay = [gregorian components:calendarUnits  fromDate:[NSDate date]];
    lastDay.day =  END_DAY;
    lastDay.month = END_MONTH;
    NSDate *lastDayDate = [gregorian dateFromComponents:lastDay];
    
    NSDateComponents *firstDay = [gregorian components:calendarUnits  fromDate:[NSDate date]];
    firstDay.day =  START_DAY;
    firstDay.month = START_MONTH;
    NSDate *firstDayDate = [gregorian dateFromComponents:firstDay];
    firstDay = [gregorian components:calendarUnits fromDate:firstDayDate]; // to reload weekDay unit
    firstDay.day -= [firstDay weekday];
    
    NSTimeInterval timePased = [[gregorian dateFromComponents:dateComponents] timeIntervalSinceDate:[gregorian dateFromComponents:firstDay]];
    if (timePased < 0 && [[NSDate date] compare:lastDayDate] == NSOrderedAscending) {
        firstDay.year -= 1;
    }
    timePased = fabs([[gregorian dateFromComponents:dateComponents] timeIntervalSinceDate:[gregorian dateFromComponents:firstDay]]);
    NSInteger weeksPast = timePased / (7*24*3600);
    NSInteger weekNum = (weeksPast % 4) + 1;
    return [self weekNumberWithNumber:weekNum createIfNotExists:YES];
}
//===============================================CORE DATA STACK===========================================
#pragma mark - Core Data stack

@synthesize managedObjectContext = _managedObjectContext;
@synthesize managedObjectModel = _managedObjectModel;
@synthesize persistentStoreCoordinator = _persistentStoreCoordinator;

- (NSURL *)applicationDocumentsDirectory
{
    NSArray *searchPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentPath = [searchPaths lastObject];
    
    return [NSURL fileURLWithPath:documentPath];
}

- (NSURL *)storeURLBase {
    // The directory the application uses to store the Core Data store file. This code uses a directory named "com.saute.Bsuir_Schedule" in the application's documents directory.
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        return [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:kAppGroup];
    } else {
        return [self applicationDocumentsDirectory];
    }
}

- (NSManagedObjectModel *)managedObjectModel {
    // The managed object model for the application. It is a fatal error for the application not to be able to find and load its model.
    if (_managedObjectModel != nil) {
        return _managedObjectModel;
    }
    
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"ScheduleData" withExtension:@"momd"];
    _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    return _managedObjectModel;
}

- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {
    // The persistent store coordinator for the application. This implementation creates and return a coordinator, having added the store for the application to it.
    if (_persistentStoreCoordinator != nil) {
        return _persistentStoreCoordinator;
    }
    
    // Create the coordinator and store
    
    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    NSURL *storeURL = [self storeURLBase];
    storeURL = [storeURL URLByAppendingPathComponent:@"ScheduleData.sqlite"];
    
    NSError *error = nil;
    NSString *failureReason = @"There was an error creating or loading the application's saved data.";
    NSDictionary *pragmaOptions = [NSDictionary dictionaryWithObject:@"MEMORY" forKey:@"journal_mode"];
    
    NSDictionary *options = [NSDictionary dictionaryWithObjectsAndKeys:
                             [NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption,
                             [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption,
                             pragmaOptions, NSSQLitePragmasOption, nil];
    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:options error:&error]) {
        // Report any error we got.
        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
        dict[NSLocalizedDescriptionKey] = @"Failed to initialize the application's saved data";
        dict[NSLocalizedFailureReasonErrorKey] = failureReason;
        dict[NSUnderlyingErrorKey] = error;
        error = [NSError errorWithDomain:@"YOUR_ERROR_DOMAIN" code:9999 userInfo:dict];
        // Replace this with code to handle the error appropriately.
        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
    
    return _persistentStoreCoordinator;
}


- (NSManagedObjectContext *)managedObjectContext {
    // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.)
    if (_managedObjectContext != nil) {
        return _managedObjectContext;
    }
    
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (!coordinator) {
        return nil;
    }
    _managedObjectContext = [[NSManagedObjectContext alloc] init];
    [_managedObjectContext setPersistentStoreCoordinator:coordinator];
    return _managedObjectContext;
}

#pragma mark - Core Data Saving support

- (void)saveContext {
    NSManagedObjectContext *managedObjectContext = self.managedObjectContext;
    if (managedObjectContext != nil) {
        NSError *error = nil;
        if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {
            // Replace this implementation with code to handle the error appropriately.
            // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
    }
}

- (void)resetSceduleForGroup:(BSGroup*)group {
//    NSArray *persistentStores = [self.persistentStoreCoordinator persistentStores];
//    for (NSPersistentStore *store in persistentStores) {
//        NSError *error;
//        NSURL *storeURL = store.URL;
//        [_persistentStoreCoordinator removePersistentStore:store error:&error];
//        [[NSFileManager defaultManager] removeItemAtPath:storeURL.path error:&error];
//        if (error) {
//            NSLog(@"Error: %@",error.localizedDescription);
//        }
//    }
//    _persistentStoreCoordinator = nil;
//    _managedObjectModel = nil;
//    _managedObjectContext = nil;
    group.scheduleStamp = nil;
    group.lastUpdate = nil;
    NSFetchRequest *pairsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSPair class])];
    NSPredicate *groupPredicate = [NSPredicate predicateWithFormat:@"groups contains[c] %@", group];
    pairsRequest.predicate = groupPredicate;
    NSError *error;
    NSArray *items = [_managedObjectContext executeFetchRequest:pairsRequest error:&error];
    
    for (NSManagedObject *managedObject in items) {
        [_managedObjectContext deleteObject:managedObject];
    }
    if (![_managedObjectContext save:&error]) {
        NSLog(@"Error deleting pair - error:%@",error);
    }
}

@end
//
//  BSScheduleParser.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 27.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSScheduleParser.h"
#import "BSConstants.h"
#import "AppDelegate.h"
#import "XMLDictionary.h"
#import "BSDataManager.h"
#import "NSUserDefaults+Share.h"
#import "NSData+MD5.h"

NSString * const kGroupName = @"name";
NSString * const kGroupID = @"id";


@implementation BSScheduleParser


//===============================================SCHEDULE PARSING===========================================
#pragma mark - Schedule parsing
#define UPDATE_INTERVAL 7*24*3600


+ (BOOL)scheduleExpiresForGroup:(BSGroup*)group {
    NSDate *lastUpdate = group.lastUpdate;
    NSInteger timeInterval = [[NSDate date] timeIntervalSinceDate:lastUpdate];
    return  !(lastUpdate && timeInterval <= UPDATE_INTERVAL);
}
//+ (void)employeesWithSuccess:(void (^)(void))success failure:(void (^)(void))failure {
//    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
//        NSData *data;
//        NSURL *url = [NSURL URLWithString:@"http://www.bsuir.by/schedule/rest/employee"];
//        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
//        data = [NSData dataWithContentsOfURL:url];
//        [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
//        NSDictionary *dict = [NSDictionary dictionaryWithXMLData:data];
//        if (dict) {
//            NSArray *employee = dict[@"employee"];
//            for (NSDictionary *lecturerData in employee) {
//                BSLecturer *lecturer;
//                if (lecturerData) {
//                    lecturer = [[BSDataManager sharedInstance] lecturerWithID:[lecturerData[kLecturerID] integerValue]];
//                    if (!lecturer) {
//                        lecturer = [[BSDataManager sharedInstance] addLecturerWithFirstName:lecturerData[kLecturerFirstName]
//                                                                                  midleName:lecturerData[kLecturerMiddleName]
//                                                                                   lastName:lecturerData[kLecturerLastName]
//                                                                                 department:@""//lecturerData[kLecturerDepartment]
//                                                                                 lecturerID:[lecturerData[kLecturerID] integerValue]];
//                        
//                    }
//                }
//            }
//        } else if (failure) {
//            dispatch_async(dispatch_get_main_queue(), failure);
//        }
//    });
//}

+ (void)parseScheduleData:(NSArray*)scheduleData forGroup:(BSGroup*)group {
    if (![scheduleData isKindOfClass:[NSArray class]]) {
        scheduleData = @[scheduleData];
    }
    for (NSDictionary *dayData in scheduleData) {
        NSString *dayName = dayData[kDayName];
        id subjects = dayData[kDaySchedule];
        if (![subjects isKindOfClass:[NSArray class]]) {
            subjects = @[subjects];
        }
        for (NSDictionary *subjectData in subjects) {
            
            NSDate *startTime;
            NSDate *endTime;
            [BSScheduleParser getStartTime:&startTime endTime:&endTime fromTimeString:subjectData[kSubjectTime]];
            NSInteger subgroupNumber = [BSScheduleParser subgroupNumberFromString:subjectData[kSubjectNumSubgroup]];
            NSString *pairType = subjectData[kSubjectType];
            NSArray *auditories = [BSScheduleParser auditoriesFromAuditoriesData:subjectData[kSubjectAuditory]];
            BSDayOfWeek *day = [[BSDataManager sharedInstance] dayWithName:dayName createIfNotExists:YES];
            NSString *subjectName = subjectData[kSubjectName];
            BSSubject *subject = [[BSDataManager sharedInstance] subjectWithName:subjectName createIfNotExists:YES];
            NSArray *lecturers = [BSScheduleParser lecturersFromLecturersData:subjectData[kLecturer]];
            NSSet *weekNumbers = [BSScheduleParser weekNumbersFromData:subjectData[kSubjectWeeks]];
            
            [[BSDataManager sharedInstance] pairWithStartTime:startTime
                                                      endTime:endTime
                                               subgroupNumber:subgroupNumber
                                                 pairTypeName:pairType
                                                 inAuditories:auditories
                                                        atDay:day
                                                      subject:subject
                                                    lecturers:lecturers
                                                        weeks:weekNumbers
                                                        group:group
                                            createIfNotExists:YES];
        }
    }

}

+ (void)scheduleForGroup:(BSGroup *)group withSuccess:(void (^)(void))success failure:(void (^)(void))failure {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSDictionary *dict = [BSScheduleParser scheduleDicitonaryForGroup:group];
        dispatch_async(dispatch_get_main_queue(), ^{
            if (dict && [dict[kScheduleModel] count] > 0) {
                NSString *loadedScheduleStamp = [[NSKeyedArchiver archivedDataWithRootObject:dict] MD5];
                NSString *savedScheduleStamp = group.scheduleStamp;
                if (![loadedScheduleStamp isEqual:savedScheduleStamp]) {
                    //reset if group exist and loaded schedule is newer
                    [[BSDataManager sharedInstance] resetSceduleForGroup:group];
                    
                    //parse schedule
                    NSArray *scheduleData = dict[kScheduleModel];
                    [BSScheduleParser parseScheduleData:scheduleData forGroup:group];
                    
                    //update stamps
                    group.lastUpdate = [NSDate date];
                    group.scheduleStamp = loadedScheduleStamp;
                    [[BSDataManager sharedInstance] saveContext];
                    if (success) success();
                } else {
                    if (success) success();
                }
            } else if (failure) {
                failure();
            }
        });
    });
}

+ (void)allGroupsWithSuccess:(void (^)(NSArray *))success failure:(void (^)(NSError *))failure {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSURL *url = [NSURL URLWithString:[BASE_URL stringByAppendingPathComponent:GROUPS_PATH]];
        NSError *error;
        NSDictionary *groupsData = [self loadDataFromURL:url error:&error];
        NSArray *groups = groupsData[GROUPS_PATH];
        if (!error && groups) {
            if (success) success(groups);
        } else {
            if (failure) failure(error);
        }
    });
}

//===============================================HELPERS===========================================
#pragma mark - Helpers

+ (NSString*)groupIDForGroup:(BSGroup*)group {
    NSString *groupID;
    
    NSURL *url = [NSURL URLWithString:[BASE_URL stringByAppendingPathComponent:GROUPS_PATH]];
    NSDictionary *groupsData = [self loadDataFromURL:url error:nil];
    NSArray *groups = groupsData[GROUPS_PATH];
    if ([groups isKindOfClass:[NSArray class]]) {
        NSPredicate *groupPredicate = [NSPredicate predicateWithBlock:^BOOL(id evaluatedObject, NSDictionary *bindings) {
            BOOL keep = NO;
            if ([evaluatedObject isKindOfClass:[NSDictionary class]]) {
                NSDictionary *groupData = evaluatedObject;
                NSString *groupName = [groupData objectForKey:kGroupName];
                keep = [groupName isEqual:group.groupNumber];
            }
            return keep;
        }];
        NSArray *groupsWithGroupName = [groups filteredArrayUsingPredicate:groupPredicate];
        groupID = [[groupsWithGroupName firstObject] objectForKey:kGroupID];
    }
    return groupID;
}

+ (NSDictionary*)scheduleDicitonaryForGroup:(BSGroup*)group {
    NSDictionary *scheduleDict;
    NSString *groupID = [self groupIDForGroup:group];
    if (groupID) {
        NSURL *url = [NSURL URLWithString:[[BASE_URL stringByAppendingPathComponent:SCHEDULE_PATH]
                                           stringByAppendingPathComponent:groupID]];
        scheduleDict = [self loadDataFromURL:url error:nil];
    }
    return scheduleDict;
}

+ (NSDictionary*)loadDataFromURL:(NSURL*)url error:(NSError**)error {
    NSData *data;
    [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    data = [NSData dataWithContentsOfURL:url options:0 error:error];
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    return [NSDictionary dictionaryWithXMLData:data];
}

+ (NSArray*)lecturersFromLecturersData:(NSArray*)lecturersData {
    if ([lecturersData isKindOfClass:[NSDictionary class]]) {
        lecturersData = @[lecturersData];
    }
    NSMutableArray *lecturers = [NSMutableArray array];
    for (NSDictionary *lecturerData in lecturersData) {
        BSLecturer *lecturer;
        if (lecturerData) {
            lecturer = [[BSDataManager sharedInstance] lecturerWithID:[lecturerData[kLecturerID] integerValue]];
            if (!lecturer) {
                lecturer = [[BSDataManager sharedInstance] addLecturerWithFirstName:lecturerData[kLecturerFirstName]
                                                                          midleName:lecturerData[kLecturerMiddleName]
                                                                           lastName:lecturerData[kLecturerLastName]
                                                                         department:@""//lecturerData[kLecturerDepartment]
                                                                         lecturerID:[lecturerData[kLecturerID] integerValue]];
                
            }
        }
        [lecturers addObject:lecturer];
    }
    return [NSArray arrayWithArray:lecturers];
}

+ (NSArray*)auditoriesFromAuditoriesData:(NSArray*)auditoriesData {
    NSMutableArray *auditories = [NSMutableArray array];
    if (auditoriesData && ![auditoriesData isKindOfClass:[NSArray class]]) {
        auditoriesData = @[auditoriesData];
    }
    for (NSString *auditoryAddress in auditoriesData) {
        BSAuditory *auditory = [[BSDataManager sharedInstance] auditoryWithAddress:auditoryAddress createIfNotExists:YES];
        [auditories addObject:auditory];
    }
    return [NSArray arrayWithArray:auditories];
}

+ (NSInteger)subgroupNumberFromString:(NSString*)subgroupNumberString {
    NSInteger subgroupNumber = 0;
    if (subgroupNumberString && ![subgroupNumberString isEqualToString:@""]) {
        subgroupNumber = [subgroupNumberString integerValue];
    }
    return subgroupNumber;
}

+ (NSSet *)weekNumbersFromData:(id)weekNumbersData {
    NSMutableSet *weekNumbers = [NSMutableSet set];
    if ([weekNumbersData isKindOfClass:[NSString class]]) {
        weekNumbersData = @[weekNumbersData];
    }
    for (NSString *weekNumberData in weekNumbersData) {
        [weekNumbers addObject:[[BSDataManager sharedInstance] weekNumberWithNumber:[weekNumberData integerValue] createIfNotExists:YES]];
    }
    return [NSSet setWithSet:weekNumbers];
}

+ (void)getStartTime:(NSDate**)startTime endTime:(NSDate**)endTime fromTimeString:(NSString*)timeString {
    timeString = [timeString stringByReplacingOccurrencesOfString:@" " withString:@""];
    NSArray *pairTime = [timeString componentsSeparatedByString:@"-"];
    NSString *startTimeString = [pairTime firstObject];
    NSString *endTimeString = [pairTime lastObject];
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    NSLocale *ru = [[NSLocale alloc] initWithLocaleIdentifier:@"ru_RU"];
    [formatter setLocale:ru];
    [formatter setDateFormat:@"HH:mm"];
    
    *startTime = [formatter dateFromString:startTimeString];
    *endTime = [formatter dateFromString:endTimeString];
}


@end
//
//  BSDayOfWeek+Number.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 09.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSDayOfWeek+Number.h"
#import "BSDayWithWeekNum.h"
#import "BSDataManager.h"

@implementation BSDayOfWeek (Number)

- (NSArray*)pairsForSchedule:(BSSchedule *)schedule weekFormat:(BOOL)weekFormat {
    NSArray *sortedPairs = [[BSDataManager sharedInstance] sortPairs:[self.pairs allObjects]];
    return [[BSDataManager sharedInstance] filterPairs:sortedPairs
                                           forSchedule:schedule
                                          forWekFormat:weekFormat];

}


- (BOOL)isEqualToDayWithWeekNum:(BSDayWithWeekNum *)object {
    return [self isEqualToDay:object.dayOfWeek];
}

- (BOOL)isEqualToDay:(BSDayOfWeek *)object {
    
    return  [[[BSDataManager sharedInstance] dayNumberForDay:object] isEqual:[[BSDataManager sharedInstance]dayNumberForDay:self]];
}
- (NSString*)dayOfWeekName {
    return self.name;
}
@end
//
//  BSLecturer+Thumbnail.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 18.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSLecturer+Thumbnail.h"
#import "NSString+Transiterate.h"
#import "NSUserDefaults+Share.h"
#import "UIImage+Thumbnail.h"
#import "BSConstants.h"

#import "SDImageCache.h"

static NSString * const kNoavatar = @"noavatar";

@implementation BSLecturer (Thumbnail)

#define LECTURER_ID_KEY @"lecturerID"
- (void)loadLecturerImageIn:(UIImageView *)imageView {
    [self loadLecturerImageIn:imageView thumb:YES];
}
- (void)loadLecturerImageIn:(UIImageView *)imageView thumb:(BOOL)thumb {
    if ([[NSUserDefaults sharedDefaults] boolForKey:kEasterEggMode]) {
        [imageView setImage:[UIImage imageNamed:@"my_face.jpg"]];
        return;
    }
    NSString *imageName = [[NSString stringWithFormat:@"%@_%@_%@", self.lastName, self.firstName, self.middleName] toLatinWithDictionary];
    NSString *thumbName = [imageName stringByAppendingString:@"_thumb"];
    UIImage *image = [[SDImageCache sharedImageCache] imageFromMemoryCacheForKey:(thumb) ? thumbName : imageName];
    if (image) {
        [imageView setImage:image];
    }  else if ([[SDImageCache sharedImageCache] diskImageExistsWithKey:(thumb) ? thumbName : imageName]) {
        image = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:(thumb) ? thumbName : imageName];
        [imageView setImage:image];
    } else {
        UIActivityIndicatorView *av = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
        av.center = CGPointMake(imageView.bounds.size.width / 2.0, imageView.bounds.size.height / 2.0);
        [imageView addSubview:av];
        [av startAnimating];        
        [imageView setImage:[UIImage imageNamed:kNoavatar]];
        PFQuery *query = [PFQuery queryWithClassName:NSStringFromClass([BSLecturer class])];
        [query whereKey:@"lecturerID" equalTo:self.lecturerID];
        [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{

                if ([objects count] > 0) {
                    PFObject *lecturer = [objects firstObject];
                    PFFile *imageFile = lecturer[@"image"];
                    NSData *imageData = [imageFile getData];
                    UIImage *image = [UIImage imageNamed:kNoavatar];
                    if (imageData.length > 0) {
                        image = [UIImage imageWithData:imageData];
                    } else if ([[SDImageCache sharedImageCache] diskImageExistsWithKey:imageName]){
                        image = [[SDImageCache sharedImageCache] imageFromDiskCacheForKey:imageName];
                    }
                    dispatch_async(dispatch_get_main_queue(), ^{
                        UIImage *thumb = [image thumbnail];
                        [[SDImageCache sharedImageCache] storeImage:image forKey:imageName toDisk:YES];
                        [[SDImageCache sharedImageCache] storeImage:thumb forKey:thumbName toDisk:YES];

                        [imageView setImage:(thumb) ? thumb : image];
                        [av removeFromSuperview];
                    });

                } else {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [av removeFromSuperview];
                    });
                }
            });
        }];
    }
    
}

@end
//
//  BSPair+Color.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 19.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPair+Color.h"
#import "BSConstants.h"

@implementation BSPair (Color)
- (UIColor*)colorForPairType {
    return [BSPair colorForPairType:(PairType)[self.pairType integerValue]];
}
+ (UIColor*)colorForPairType:(PairType)pairType {
    UIColor *pairTypeColor;
    switch (pairType) {
        case BSPairTypeLaboratory:
            pairTypeColor = BS_YELLOW;
            break;
        case BSPairTypeLecture:
            pairTypeColor = BS_GREEN;
            break;
        case BSPairTypePractical:
            pairTypeColor = BS_RED;
            break;
        default:
            pairTypeColor = BS_BLUE;
            break;
    }
    return pairTypeColor;
}
@end
//
//  BSPair+Type.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 19.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPair+Type.h"

@implementation BSPair (Type)
- (NSString*)pairTypeName {
    NSString *pairTypeName;
    PairType pairType = (PairType)[self.pairType integerValue];
    switch (pairType) {
        case BSPairTypeLaboratory:
            pairTypeName = @"ЛР";
            break;
        case BSPairTypeLecture:
            pairTypeName = @"ЛК";
            break;
        case BSPairTypePractical:
            pairTypeName = @"ПЗ";
            break;
        default:
            pairTypeName = @"Неизвестно";
            break;
    }
    return pairTypeName;
}

+ (PairType)pairTypeWithName:(NSString *)pairTypeName
{
    PairType pairType = BSPairTypeUnknown;
    if ([pairTypeName isEqualToString:@"ЛК"]) {
        pairType = BSPairTypeLecture;
    } else if ([pairTypeName isEqualToString:@"ПЗ"]) {
        pairType = BSPairTypePractical;
    } else if ([pairTypeName isEqualToString:@"ЛР"]) {
        pairType = BSPairTypeLaboratory;
    }
    return pairType;
}

- (void)setPairTypeWithName:(NSString *)pairTypeName {
    self.pairType = @([BSPair pairTypeWithName:pairTypeName]);
}
@end
//
//  BSAuditory.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSAuditory.h"
#import "BSPair.h"


@implementation BSAuditory

@dynamic address;
@dynamic subjectsSchedule;

@end
//
//  BSDayOfWeek.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSDayOfWeek.h"
#import "BSPair.h"


@implementation BSDayOfWeek

@dynamic name;
@dynamic pairs;

@end
//
//  BSDayWithWeekNum.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 21.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSDayWithWeekNum.h"
#import "BSDataManager.h"
#import "NSDate+Compare.h"
#import "BSConstants.h"
#import "NSUserDefaults+Share.h"

@implementation BSDayWithWeekNum

- (instancetype)initWithDate:(NSDate *)date {
    self = [super init];
    if (self) {
        self.date = date;
        self.weekNumber = [[BSDataManager sharedInstance] weekNumberWithDate:date];
        self.dayOfWeek = [[BSDataManager sharedInstance] dayWithDate:date];
    }
    return self;
}
- (NSArray*)pairs {
    if (!_pairs) {
        NSArray *pairs = [[BSDataManager sharedInstance] sortPairs:[self.dayOfWeek.pairs allObjects]];
        NSMutableArray *weekPairs = [NSMutableArray array];
        for (BSPair *pair in pairs) {
            BOOL pairForWeek = [pair.weeks containsObject:self.weekNumber];
            if (pairForWeek) {
                [weekPairs addObject:pair];
            }
        }
        _pairs = weekPairs;
    }
    return _pairs;
}

- (BOOL)isEqual:(BSDayWithWeekNum *)object {
    BOOL equal = NO;
    BOOL equalWeekDay = [self.dayOfWeek isEqual:object.dayOfWeek] || (self.dayOfWeek == nil && object.dayOfWeek == nil);
    BOOL equalWeekNum = [self.weekNumber isEqual:object.weekNumber] || (self.weekNumber == nil && object.weekNumber == nil);
    BOOL equalDate = [self.date isEqualToDateWithoutTime:object.date];
    equal = equalWeekDay && equalWeekNum && equalDate;
    return equal;
}

- (NSArray*)pairsForSchedule:(BSSchedule *)schedule weekFormat:(BOOL)weekFormat {
    return [[BSDataManager sharedInstance] filterPairs:self.pairs forSchedule:schedule forWekFormat:weekFormat];
}
- (BOOL)isEqualToDayWithWeekNum:(BSDayWithWeekNum *)object {
    return [self isEqual:object];
}
- (BOOL)isEqualToDay:(BSDayOfWeek *)object {
    return [self.dayOfWeek isEqualToDay:object];
}
- (NSString*)dayOfWeekName {
    return self.dayOfWeek.name;
}
@end
//
//  BSGroup.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 12.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSGroup.h"
#import "BSPair.h"
#import "BSSchedule.h"


@implementation BSGroup

@dynamic groupNumber;
@dynamic lastUpdate;
@dynamic scheduleStamp;
@dynamic pairs;
@dynamic schedules;

@end
//
//  BSLecturer.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSLecturer.h"
#import "BSPair.h"


@implementation BSLecturer

@dynamic academicDepartment;
@dynamic firstName;
@dynamic lastName;
@dynamic lecturerID;
@dynamic middleName;
@dynamic pairs;

@end
//
//  BSPair.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 12.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSPair.h"
#import "BSAuditory.h"
#import "BSDayOfWeek.h"
#import "BSGroup.h"
#import "BSLecturer.h"
#import "BSSubject.h"
#import "BSWeekNumber.h"


@implementation BSPair

@dynamic endTime;
@dynamic pairType;
@dynamic startTime;
@dynamic subgroupNumber;
@dynamic auditories;
@dynamic day;
@dynamic groups;
@dynamic lecturers;
@dynamic subject;
@dynamic weeks;

@end
//
//  BSSchedule.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 12.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSSchedule.h"
#import "BSGroup.h"


@implementation BSSchedule

@dynamic subgroup;
@dynamic createdAt;
@dynamic group;

@end
//
//  BSSubject.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSSubject.h"
#import "BSPair.h"


@implementation BSSubject

@dynamic name;
@dynamic daysSchedule;

@end
//
//  BSWeekNumber.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSWeekNumber.h"
#import "BSPair.h"


@implementation BSWeekNumber

@dynamic weekNumber;
@dynamic pairs;

@end
//
//  BSAchivementsVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 06.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivementsVC.h"
#import "BSAchivementManager.h"

#import "BSAchivementCell.h"
#import "BSSocialAchivementCell.h"
#import "BSPurchaseAchivementCell.h"

#import "BSAchivement.h"
#import "BSSocialAchivement.h"
#import "BSPurchaseAchivement.h"

#import "BSConstants.h"
#import "BSUtils.h"

#import <Parse/Parse.h>
#import "UIViewController+Achivements.h"

@import Twitter;
@import MessageUI;

@interface BSAchivementsVC () <SKPaymentTransactionObserver, MFMailComposeViewControllerDelegate, UITableViewDataSource, UITableViewDelegate,
BSSocialAchivementCellDelegate, BSPurchaseAchivementCellDelegate>

@property (weak, nonatomic) IBOutlet UITableView *tableView;
@property (strong, nonatomic) NSArray *achivements;
@property (strong, nonatomic) UIView *loadindicatorView;
@end

@implementation BSAchivementsVC

- (instancetype)init {
    return [self initWithNibName:NSStringFromClass([self class]) bundle:nil];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.title = LZD(@"L_Achivements");
    
    self.achivements = [[BSAchivementManager sharedInstance] achivements];
    
    [self.navigationController.view addSubview:self.loadindicatorView];
    self.loadindicatorView.hidden = YES;
    
    [self.tableView registerNib:[UINib nibWithNibName:NSStringFromClass([BSAchivementCell class]) bundle:nil]
         forCellReuseIdentifier:kAchivementCellID];
    [self.tableView registerNib:[UINib nibWithNibName:NSStringFromClass([BSSocialAchivementCell class]) bundle:nil]
         forCellReuseIdentifier:kSocialAchivementCellID];
    [self.tableView registerNib:[UINib nibWithNibName:NSStringFromClass([BSPurchaseAchivementCell class]) bundle:nil]
         forCellReuseIdentifier:kPurchaseAchivementCellID];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(achivementUnlocked) name:kAchivementUnlocked object:nil];
    
    [self registerPurchasesLogic];
    
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:LZD(@"L_Restore")
                                                                              style:UIBarButtonItemStylePlain
                                                                             target:self
                                                                             action:@selector(restorePurchases)];
}

- (void)achivementUnlocked {
    [self.tableView reloadData];
}

//===============================================PURCHASES===========================================
#pragma mark - TransactionsDeleagte
- (void)registerPurchasesLogic {
    [PFPurchase addObserverForProduct:kSupporterAchivementID block:^(SKPaymentTransaction *transaction) {
        if (transaction.transactionState == SKPaymentTransactionStatePurchased) {
            [self triggerAchivementWithType:BSAchivementTypeSupporter];
        } else if (transaction.transactionState == SKPaymentTransactionStateRestored) {
            [[BSAchivementManager sharedInstance] triggerAchivementWithType:BSAchivementTypeSupporter];
        }
    }];
    [PFPurchase addObserverForProduct:kSuperSupporterAchivementID block:^(SKPaymentTransaction *transaction) {
        if (transaction.transactionState == SKPaymentTransactionStatePurchased) {
            [self triggerAchivementWithType:BSAchivementTypeSuperSupporter];
        } else if (transaction.transactionState == SKPaymentTransactionStateRestored) {
            [[BSAchivementManager sharedInstance] triggerAchivementWithType:BSAchivementTypeSuperSupporter];
        }
    }];
    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];
}

- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions
{
}

- (void)restorePurchases {
    [self showLoadingView];
    [PFPurchase restore];
}
- (void)paymentQueueRestoreCompletedTransactionsFinished:(SKPaymentQueue *)queue {
    [self hideLoadingView];
    [BSUtils showAlertWithTitle:LZD(@"L_PurchaseRestore") message:LZD(@"L_PurchaseRestoreSuccess") inVC:self];
}

- (void)paymentQueue:(SKPaymentQueue *)queue restoreCompletedTransactionsFailedWithError:(NSError *)error {
    [self hideLoadingView];
    [BSUtils showAlertWithTitle:LZD(@"L_Error") message:[LZD(@"L_PurchaseRestoreError") stringByAppendingString:error.localizedDescription] inVC:self];
    
}

//===============================================TABLE VIEW===========================================
#pragma mark - TableView

- (BOOL)tableView:(UITableView *)tableView shouldHighlightRowAtIndexPath:(NSIndexPath *)indexPath {
    return NO;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self.achivements count];
}

- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    BSAchivementCell *cell;
    BSAchivement *achivement = [self.achivements objectAtIndex:indexPath.row];
    if ([achivement isKindOfClass:[BSSocialAchivement class]]) {
        cell = [tableView dequeueReusableCellWithIdentifier:kSocialAchivementCellID forIndexPath:indexPath];
        [(BSSocialAchivementCell*)cell setDelegate:self];
    } else if ([achivement isKindOfClass:[BSPurchaseAchivement class]]) {
        cell = [tableView dequeueReusableCellWithIdentifier:kPurchaseAchivementCellID forIndexPath:indexPath];
        [(BSPurchaseAchivementCell*)cell setDelegate:self];
    } else {
        cell = [tableView dequeueReusableCellWithIdentifier:kAchivementCellID forIndexPath:indexPath];
    }
    [cell setupWithAchivement:achivement];
    return cell;
}
static CGFloat const achivementCellHeight = 140.0f;
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return achivementCellHeight;
}

//===============================================LOADING SCREEN===========================================
#pragma mark - Loading screen
- (void)showLoadingView {
    if (self.loadindicatorView.hidden) {
        self.loadindicatorView.hidden = NO;
        self.loadindicatorView.alpha = 0;
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.5;
        }];
    }
}

- (void)hideLoadingView {
    if (!self.loadindicatorView.hidden) {
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.0;
        } completion:^(BOOL finished) {
            if (finished) {
                self.loadindicatorView.hidden = YES;
            }
        }];
    }
}

- (UIView*)loadindicatorView {
    if (!_loadindicatorView) {
        _loadindicatorView = [[UIView alloc] initWithFrame:self.navigationController.view.bounds];
        _loadindicatorView.backgroundColor = [UIColor blackColor];
        UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
        activityIndicator.center = CGPointMake(_loadindicatorView.bounds.size.width / 2.0, _loadindicatorView.bounds.size.height / 2.0);
        [_loadindicatorView addSubview:activityIndicator];
        [activityIndicator startAnimating];
    }
    return _loadindicatorView;
}

//===============================================PURCHASE CELL DELEGATE===========================================
#pragma mark - Purchase Cell delegate

- (void)purchaseAchivementCellBuyPressed:(BSPurchaseAchivementCell *)cell {
    [self showLoadingView];
    NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
    BSPurchaseAchivement *achivement = [self.achivements objectAtIndex:indexPath.row];
    __weak typeof(self) weakself = self;
    [PFPurchase buyProduct:achivement.purchaseID block:^(NSError *error) {
        [weakself hideLoadingView];
    }];
}

//===============================================SOCIAL CELL DELEGATE===========================================
#pragma mark - Social Cell delegate

- (void)socialAchivementCellDidPressEmail:(BSSocialAchivementCell *)cell {
    [self showLoadingView];
    NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
    BSAchivement *achivement = [self.achivements objectAtIndex:indexPath.row];
    [self showMailScreenForAchivement:achivement];
}
- (void)socialAchivementCellDidPressFacebook:(BSSocialAchivementCell *)cell {
    [self showLoadingView];
    NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
    BSAchivement *achivement = [self.achivements objectAtIndex:indexPath.row];
    [self showShareScreenWithType:SLServiceTypeFacebook forAchivement:achivement];
}
- (void)socialAchivementCellDidPressTwitter:(BSSocialAchivementCell *)cell {
    [self showLoadingView];
    NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
    BSAchivement *achivement = [self.achivements objectAtIndex:indexPath.row];
    [self showShareScreenWithType:SLServiceTypeTwitter forAchivement:achivement];
}
//===============================================SOCIAL===========================================
#pragma mark - Social

- (void)showShareScreenWithType:(NSString*)type forAchivement:(BSAchivement*)achivement {
    if ([SLComposeViewController isAvailableForServiceType:type]) {
        SLComposeViewController *vc = [SLComposeViewController composeViewControllerForServiceType:type];
        __weak typeof(self) weakself = self;
        vc.completionHandler = ^(SLComposeViewControllerResult result) {
            [weakself hideLoadingView];
            if (result == SLComposeViewControllerResultDone) {
                [weakself dismissViewControllerAnimated:YES completion:^{
                    [weakself triggerAchivementWithType:BSAchivementTypeSocial];
                }];
            }
        };
        UIImage *appIcon = [UIImage imageNamed:@"bsuir_icon.jpg"];

        [vc addImage:appIcon];
        [vc setInitialText:[(BSSocialAchivement*)achivement shareText]];
        [vc addURL:[NSURL URLWithString:kAppURL]];
        [self presentViewController:vc animated:YES completion:nil];
    } else {
        [BSUtils showAlertWithTitle:LZD(@"L_Error") message:LZD(@"L_NoAvailable") inVC:self];
    }
}


//===============================================MAIL===========================================
#pragma mark - Mail
- (void)showMailScreenForAchivement:(BSAchivement*)achivement {
    UIViewController *rootVC = self;
    if([MFMailComposeViewController canSendMail]) {
        MFMailComposeViewController *mailCont = [[MFMailComposeViewController alloc] init];
        mailCont.mailComposeDelegate = self;
        
        [mailCont setSubject:@"Bsuir Schedule"];
        NSString *message = [NSString stringWithFormat:@"%@ %@",[(BSSocialAchivement*)achivement shareText], kAppURL];
        [mailCont setMessageBody:message isHTML:NO];
        [rootVC presentViewController:mailCont animated:YES completion:^{
            [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];
            [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];
        }];
    } else {
        [BSUtils showAlertWithTitle:LZD(@"L_Error") message:LZD(@"L_NoAvailable") inVC:rootVC];
    }
}


// Then implement the delegate method
- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError*)error {
    [self hideLoadingView];
    __weak typeof(self) weakself = self;
    [self dismissViewControllerAnimated:YES completion:^{
        if (result == MFMailComposeResultSent) {
            [weakself triggerAchivementWithType:BSAchivementTypeSocial];
        }
    }];
}


@end
//
//  BSAchivementVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 05.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivementUnlockedVC.h"
#import "UIView+Screenshot.h"
#import "BSConstants.h"

@interface BSAchivementUnlockedVC ()
@property (weak, nonatomic) IBOutlet UIImageView *achivementImage;
@property (weak, nonatomic) IBOutlet UILabel *achivementNameLabel;
@property (weak, nonatomic) IBOutlet UILabel *achivementUnlockedLabel;

@property (weak, nonatomic) IBOutlet UIButton *okBtn;

@property (weak, nonatomic) IBOutlet UIImageView *backIV;
@property (weak, nonatomic) IBOutlet UIView *centerView;

@property (strong, nonatomic) BSAchivement *achivement;
@end

@implementation BSAchivementUnlockedVC

- (instancetype)initWithAchivement:(BSAchivement*)achivement {
    self = [self initWithNibName:NSStringFromClass([self class]) bundle:nil];
    if (self) {
        self.achivement = achivement;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self.achivementImage setImage:[self.achivement image]];
    [self.achivementNameLabel setText:self.achivement.name];
    
    self.centerView.layer.masksToBounds = NO;
    self.centerView.layer.cornerRadius = 5.0;
    
    self.okBtn.layer.masksToBounds = NO;
    self.okBtn.layer.cornerRadius = 5.0;
    
    [self.achivementUnlockedLabel setText:LZD(@"L_AchivementUnlocked")];
    [self.okBtn setTitle:LZD(@"L_Ok") forState:UIControlStateNormal];
    [self.okBtn setTitle:LZD(@"L_Ok") forState:UIControlStateNormal | UIControlStateHighlighted];
    
}


#define DEFAULT_ANIMATION_DURATION 0.4


- (void)viewDidAppear:(BOOL)animated {
    
    self.backIV.image = [[[UIApplication sharedApplication] keyWindow] bluredScreenshot];
    self.backIV.alpha = 0.0;
    [self replaceCenterConstraintOnView:self.centerView withConstant:-self.view.bounds.size.height/2.0];

    __weak typeof(self) weakself = self;
    [UIView animateWithDuration:DEFAULT_ANIMATION_DURATION animations:^{
        typeof(weakself) self = weakself;
        [self.view layoutIfNeeded];
        self.backIV.alpha = 1.0;
    }];
    [super viewDidAppear:animated];
}

- (void)replaceCenterConstraintOnView:(UIView *)view withConstant:(float)constant
{
    [self.view.constraints enumerateObjectsUsingBlock:^(NSLayoutConstraint *constraint, NSUInteger idx, BOOL *stop) {
        if ((constraint.secondItem == view) && (constraint.secondAttribute == NSLayoutAttributeCenterY)) {
            constraint.constant = constant;
        }
    }];
}



- (IBAction)dismiss:(id)sender {
    [self replaceCenterConstraintOnView:self.centerView withConstant:self.centerView.bounds.size.height / 2.0];
    __weak typeof(self) weakself = self;
    [UIView animateWithDuration:DEFAULT_ANIMATION_DURATION animations:^{
        typeof(weakself) self = weakself;
        [self.view layoutIfNeeded];
        self.backIV.alpha = 0.0;
    } completion:^(BOOL finished) {
        [weakself dismissViewControllerAnimated:NO completion:nil];
    }];
}

@end
//
//  BSAchivementCell.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 05.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSAchivementCell.h"

NSString * const kAchivementCellID = @"kAchivementCellID";

@interface BSAchivementCell()
@property (weak, nonatomic) IBOutlet UILabel *nameLabel;
@property (weak, nonatomic) IBOutlet UILabel *descriptionLabel;
@property (weak, nonatomic) IBOutlet UIImageView *imageIV;
@end

@implementation BSAchivementCell

- (void)setupWithAchivement:(BSAchivement *)achivement {
    [self.nameLabel setText:achivement.name];
    [self.descriptionLabel setText:achivement.achivementDescription];
    [self.imageIV setImage:[achivement image]];
    _achivement = achivement;
}
- (void)awakeFromNib {
    // Initialization code
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated {
    [super setSelected:selected animated:animated];

    // Configure the view for the selected state
}

@end
//
//  BSSocialAchivementCell.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 06.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSPurchaseAchivementCell.h"
#import "BSConstants.h"

NSString * const kPurchaseAchivementCellID = @"kPurchaseAchivementCellID";
@implementation BSPurchaseAchivementCell

- (void)setupWithAchivement:(BSAchivement *)achivement {
    [super setupWithAchivement:achivement];
    self.buyButton.hidden = achivement.unlocked;
}

- (void)awakeFromNib {
    self.buyButton.layer.masksToBounds = YES;
    self.buyButton.layer.cornerRadius = 5.0;
    
    self.buyButton.layer.borderWidth = 1.0;
    self.buyButton.layer.borderColor = self.buyButton.tintColor.CGColor;
    
    [self.buyButton setTitle:LZD(@"L_Buy") forState:UIControlStateNormal];
    [self.buyButton setTitle:LZD(@"L_Buy") forState:UIControlStateNormal | UIControlStateHighlighted];
}

- (IBAction)buyPressed:(id)sender {
    [self.delegate purchaseAchivementCellBuyPressed:self];
}
@end
//
//  BSSocialAchivementCell.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 06.03.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSSocialAchivementCell.h"


NSString * const kSocialAchivementCellID = @"kSocialAchivementCellID";
@interface BSSocialAchivementCell()

@end
@implementation BSSocialAchivementCell


- (IBAction)showMail:(id)sender {
    [self.delegate socialAchivementCellDidPressEmail:self];
}

- (IBAction)showTwitter:(id)sender {
    [self.delegate socialAchivementCellDidPressTwitter:self];
}

- (IBAction)showFacebook:(id)sender {
    [self.delegate socialAchivementCellDidPressFacebook:self];
}


@end
//
//  BMWLecturerPreview.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 23.01.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSLecturerPreview.h"
#import <Parse/Parse.h>
#import <Bolts/Bolts.h>

@implementation BSLecturerPreview

- (void)willMoveToSuperview:(UIView *)newSuperview {
    [super willMoveToSuperview:newSuperview];
    self.backgroundColor = [UIColor clearColor];
}
#define HORISONTAL_OFFSET -5.0f
#define VERTICAL_OFFSET 0.0f
#define LECTURER_NAME_FONT_SIZE 10.0f

- (void)setupWithLecturer:(BSLecturer*)lecturer {
    self.lecturerIV = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, LECTURER_IMAGE_WIDTH, LECTURER_IMAGE_WIDTH)];

    [lecturer loadLecturerImageIn:self.lecturerIV];
    
    self.lecturerIV.contentMode = UIViewContentModeScaleAspectFill;
    [self.lecturerIV.layer setCornerRadius:LECTURER_IMAGE_WIDTH / 2.0];
    self.lecturerIV.layer.masksToBounds = YES;
    
    [self addSubview:self.lecturerIV];
    
    self.lecturerIV.translatesAutoresizingMaskIntoConstraints = NO;
    [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:[_lecturerIV(width)]" options:0  metrics:@{@"width":@(LECTURER_IMAGE_WIDTH)} views:NSDictionaryOfVariableBindings(_lecturerIV)]];
    [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:[_lecturerIV(height)]" options:0 metrics:@{@"height":@(LECTURER_IMAGE_WIDTH)} views:NSDictionaryOfVariableBindings(_lecturerIV)]];
    [self addConstraint:[NSLayoutConstraint constraintWithItem:self.lecturerIV attribute:NSLayoutAttributeCenterX relatedBy:NSLayoutRelationEqual toItem:self attribute:NSLayoutAttributeCenterX multiplier:1 constant:0]];
    [self addConstraint:[NSLayoutConstraint constraintWithItem:self.lecturerIV attribute:NSLayoutAttributeCenterY relatedBy:NSLayoutRelationEqual toItem:self attribute:NSLayoutAttributeCenterY multiplier:1 constant:0]];
    
    UILabel *lecturerLastNameLabel = [[UILabel alloc] init];
    [lecturerLastNameLabel setText:lecturer.lastName];
    [lecturerLastNameLabel setFont:[UIFont fontWithName:@"OpenSans" size:LECTURER_NAME_FONT_SIZE]];
    lecturerLastNameLabel.textAlignment = NSTextAlignmentCenter;
    [self addSubview:lecturerLastNameLabel];
    
    lecturerLastNameLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-offset-[lecturerLastNameLabel]-offset-|" options:0 metrics:@{@"offset": @(HORISONTAL_OFFSET)} views:NSDictionaryOfVariableBindings(lecturerLastNameLabel)]];
    [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:[_lecturerIV]-offset-[lecturerLastNameLabel(14.0)]" options:0 metrics:@{@"offset": @(VERTICAL_OFFSET)} views:NSDictionaryOfVariableBindings(_lecturerIV,lecturerLastNameLabel)]];
    
    
    lecturerLastNameLabel.hidden = YES;
    self.lecturerNameLabel = lecturerLastNameLabel;
    
    self.lecturer = lecturer;
}

- (void)updateWithLecturer:(BSLecturer *)lecturer {
    self.lecturer = lecturer;
    [lecturer loadLecturerImageIn:self.lecturerIV];
    [self.lecturerNameLabel setText:lecturer.lastName];
}
@end
//
//  BSLecturerVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 04.12.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSLecturerVC.h"
#import "UIView+Screenshot.h"
#import "BSConstants.h"
#import <ParseUI/ParseUI.h>
#import "BSLecturer+Thumbnail.h"

#import "BSAchivementUnlockedVC.h"
#import "BSAchivementManager.h"

#import "UIViewController+Achivements.h"

@interface BSLecturerVC ()
@property (strong, nonatomic) IBOutlet UIImageView *lecturerIV;
@property (strong, nonatomic) IBOutlet UILabel *lecturerNameLabel;
@property (strong, nonatomic) IBOutlet UIImageView *backIV;
@property (strong, nonatomic) IBOutlet UIView *centerView;

@property (strong, nonatomic) UIImageView *previewIV;
@property (strong, nonatomic) BSLecturer *lecturer;
@property (assign, nonatomic) CGRect startFrame;

@property (nonatomic, assign) CGRect originalBounds;
@property (nonatomic, assign) CGPoint originalCenter;

@property (nonatomic) UIDynamicAnimator *animator;
@property (nonatomic) UIAttachmentBehavior *attachmentBehavior;
@property (nonatomic) UIPushBehavior *pushBehavior;
@property (nonatomic) UIDynamicItemBehavior *itemBehavior;

@property (assign, nonatomic) BOOL dismissing;
@property (assign, nonatomic) BOOL showCenterFinished;
@end

@implementation BSLecturerVC
- (instancetype)initWithLecturer:(BSLecturer*)lecturer startFrame:(CGRect)startFrame
{
    self = [super initWithNibName:NSStringFromClass([BSLecturerVC class]) bundle:nil];
    if (self) {
        self.lecturer = lecturer;
        self.startFrame = startFrame;
    }
    return self;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        self.backIV.image = [[[UIApplication sharedApplication] keyWindow] bluredScreenshot];
    } else {
        self.backIV.backgroundColor = [UIColor blackColor];
    }
    [self.lecturer loadLecturerImageIn:self.lecturerIV thumb:NO];
    self.lecturerNameLabel.text = [NSString stringWithFormat:@"%@ %@ %@",
                                   self.lecturer.lastName,
                                   self.lecturer.firstName,
                                   self.lecturer.middleName];
    
    self.previewIV = [[UIImageView alloc] initWithFrame:self.startFrame];
    [self.lecturer loadLecturerImageIn:self.previewIV thumb:NO];
    self.previewIV.contentMode = UIViewContentModeScaleAspectFill;
    self.previewIV.layer.cornerRadius = self.previewIV.frame.size.width / 2.0;
    self.previewIV.layer.masksToBounds = YES;
    [self.view addSubview:self.previewIV];
    
    self.animator = [[UIDynamicAnimator alloc] initWithReferenceView:self.view];
}

#define HORISONTAL_OFFSET 20.0
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    self.backIV.alpha = 0.0;
    self.centerView.alpha = 0.0;
    UIWindow *frontWindow = [[UIApplication sharedApplication] keyWindow];
    CGRect centerViewFrame = self.centerView.frame;
    CGFloat newWidth = CGRectGetWidth(frontWindow.frame) - 2*HORISONTAL_OFFSET;
    centerViewFrame.size.height *= (newWidth / centerViewFrame.size.width);
    centerViewFrame.size.width = newWidth;
    self.centerView.frame = centerViewFrame;
    self.centerView.center = CGPointMake(frontWindow.frame.size.width / 2.0, frontWindow.frame.size.height / 2.0);
}

#define LECTURER_VC_ANIMATION_DURATION 0.3
#define LECTURER_NAME_ANIMATION_DURATION 0.2
- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    [self showCenterView];
    self.originalBounds = self.centerView.bounds;
    self.originalCenter = self.centerView.center;
    
    [self triggerAchivementWithType:BSAchivementTypeWatcher];
}
static CGFloat const iPhoneWidth = 270.0f;
static CGFloat const iPadWidth = 350.0f;
static CGFloat const ratio = 1.407f;

- (void)showCenterView {
    CGFloat width = ([UIDevice currentDevice].userInterfaceIdiom == UIUserInterfaceIdiomPad) ? iPadWidth : iPhoneWidth;
    CGFloat height = width * ratio;
    self.centerView.frame = CGRectMake(0, 0, width, height);
    self.centerView.center = CGPointMake(self.view.bounds.size.width / 2.0, self.view.bounds.size.height / 2.0);
    __weak typeof(self) weakself = self;
    [UIView animateWithDuration:LECTURER_VC_ANIMATION_DURATION animations:^{
        typeof(weakself) self = weakself;
        self.previewIV.frame = [self.view convertRect:self.lecturerIV.frame fromView:self.centerView];
        self.previewIV.layer.cornerRadius = 0.0;
        self.backIV.alpha = (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) ? 1.0 : 0.8;
    } completion:^(BOOL finished) {
        [UIView animateWithDuration:LECTURER_NAME_ANIMATION_DURATION animations:^{
            typeof(weakself) self = weakself;
            self.centerView.alpha = 1.0;
        } completion:^(BOOL finished) {
            typeof(weakself) self = weakself;
            [self.previewIV removeFromSuperview];
            self.showCenterFinished = YES;
        }];
    }];
}

- (void)dismiss {
    if (!self.dismissing) {
        self.dismissing = YES;
        __weak typeof(self) weakself = self;
        [UIView animateWithDuration:LECTURER_VC_ANIMATION_DURATION animations:^{
            typeof(weakself) self = weakself;
            if (!SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
                self.centerView.alpha = 0.0;
            }
            self.view.alpha = 0.0;
        } completion:^(BOOL finished) {
            [weakself dismissViewControllerAnimated:NO completion:nil];
        }];
    }
}

//===============================================GUSETURE RECOGNISER===========================================
#pragma mark - Guesture recogniser

static const CGFloat ThrowingThreshold = 5000;
static const CGFloat ThrowingVelocityPadding = 35;

- (IBAction) handleTapGesture:(UITapGestureRecognizer*)gesture {
    [self dismiss];
}

- (IBAction) handleAttachmentGesture:(UIPanGestureRecognizer*)gesture
{
    if (!self.showCenterFinished) {
        return;
    }
    CGPoint location = [gesture locationInView:self.view];
    CGPoint boxLocation = [gesture locationInView:self.centerView];

    switch (gesture.state) {
        case UIGestureRecognizerStateBegan:{
            [self.view removeConstraints:self.centerView.constraints];
            [self.view setNeedsDisplay];
            [self.animator removeAllBehaviors];
            UIOffset centerOffset = UIOffsetMake(boxLocation.x - CGRectGetMidX(self.centerView.bounds),
                                                 boxLocation.y - CGRectGetMidY(self.centerView.bounds));
            self.attachmentBehavior = [[UIAttachmentBehavior alloc] initWithItem:self.centerView
                                                                offsetFromCenter:centerOffset
                                                                attachedToAnchor:location];
            [self.animator addBehavior:self.attachmentBehavior];
            break;
        }
        case UIGestureRecognizerStateEnded: {
            [self.animator removeBehavior:self.attachmentBehavior];
             
             //1
             CGPoint velocity = [gesture velocityInView:self.view];
             CGFloat magnitude = sqrtf((velocity.x * velocity.x) + (velocity.y * velocity.y));
             magnitude *= 3;
             if (magnitude > ThrowingThreshold) {
                 //2
                 UIPushBehavior *pushBehavior = [[UIPushBehavior alloc]
                                                 initWithItems:@[self.centerView]
                                                 mode:UIPushBehaviorModeInstantaneous];
                 pushBehavior.pushDirection = CGVectorMake((velocity.x ) , (velocity.y ));
                 pushBehavior.magnitude = magnitude / ThrowingVelocityPadding;
                 __weak typeof(self) weakSelf = self;
                 pushBehavior.action = ^{
                     typeof(weakSelf) self = weakSelf;
                     CGFloat minX = 0.0;
                     CGFloat maxX = CGRectGetMaxX(self.view.frame);
                     CGFloat minY = 0.0;
                     CGFloat maxY = CGRectGetMaxY(self.view.frame);
                     CGPoint centerCenter = self.centerView.center;
                     BOOL inView = (minX < centerCenter.x && maxX > centerCenter.x) && (minY < centerCenter.y && maxY > centerCenter.y);
                     if (!inView) {
                         [self dismiss];
                     }
                 };
                 self.pushBehavior = pushBehavior;
                 [self.animator addBehavior:self.pushBehavior];
                 
                 CGPoint center = CGPointMake(self.centerView.bounds.size.width / 2.0, self.centerView.bounds.size.width / 2.0);
                 CGPoint location = [gesture locationInView:self.centerView];
                 location.x -= center.x;
                 location.y -= center.y;
                 CGPoint velPoint = CGPointMake(location.x + velocity.x - center.x, location.y + velocity.y - center.y);

                 CGFloat space = (velPoint.y*(location.x - velPoint.x) - velPoint.x*(location.y - velPoint.y))/ 2.0;
                 
                 CGFloat angularVelocity =  space / 25000.0;
                 
                 self.itemBehavior = [[UIDynamicItemBehavior alloc] initWithItems:@[self.centerView]];
                 self.itemBehavior.friction = 0.2;
                 self.itemBehavior.allowsRotation = YES;
                 [self.itemBehavior addAngularVelocity:angularVelocity forItem:self.centerView];
                 [self.animator addBehavior:self.itemBehavior];
                 
                 [self performSelector:@selector(resetDemo) withObject:nil afterDelay:0.4];
             }
             
             else {
                 [self resetDemo];
             }
            break;
        }
        default:
            [self.attachmentBehavior setAnchorPoint:[gesture locationInView:self.view]];
            break;
    }
}

- (void)resetDemo
{
    [self.animator removeAllBehaviors];
    
    [UIView animateWithDuration:0.45 animations:^{
        self.centerView.bounds = self.originalBounds;
        self.centerView.center = self.originalCenter;
        self.centerView.transform = CGAffineTransformIdentity;
    }];
}

- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}
@end
//
//  BSMainVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 28.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSMainVC.h"
#import "BSMenuVC.h"

#import "BSScheduleVC.h"
#import "BSSettingsVC.h"

#import "BSDataManager.h"
@interface BSMainVC ()
@property (strong, nonatomic) NSString *initialGroupNumber;
@end

@implementation BSMainVC


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    /*******************************
     *     Initializing menus
     *******************************/
    self.leftMenu = [[BSMenuVC alloc] init];
    /*******************************
     *     End Initializing menus
     *******************************/
    
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

#pragma mark - Overriding methods
- (void)configureLeftMenuButton:(UIButton *)button
{
    // Creating a custom bar button for right menu
    button.frame = CGRectMake(0, 0, 20, 20);
    [button setImage:[UIImage imageNamed:@"menu_burger"] forState:UIControlStateNormal];
}

- (CGFloat)leftMenuWidth {
    return 270.0f;
}

- (void)showVCForGroupNumber:(NSString *)groupNumber {
    self.initialGroupNumber = groupNumber;
    NSIndexPath *groupIndexPath = [(BSMenuVC*)self.leftMenu indexPathForGroupNumber:groupNumber];
    [(BSMenuVC*)self.leftMenu openVCAtIndexPath:groupIndexPath];
}

- (NSIndexPath *)initialIndexPathForLeftMenu {
    NSIndexPath *initialIndexPath = [(BSMenuVC*)self.leftMenu indexPathForGroupNumber:self.initialGroupNumber];
    if (!initialIndexPath) {
        initialIndexPath = [(BSMenuVC*)self.leftMenu settingsIndexPath];
    }
    return initialIndexPath;
}

- (void) configureSlideLayer:(CALayer *)layer
{
    layer.shadowColor = [UIColor blackColor].CGColor;
    layer.shadowOpacity = 0.4;
    layer.shadowRadius = 20.0;
    layer.shadowOffset = CGSizeMake(0, 0);
    layer.masksToBounds = NO;
    layer.shadowPath =[UIBezierPath bezierPathWithRect:layer.bounds].CGPath;
}

@end
//
//  BMWMenuVC.m
//  BMW club
//
//  Created by Anton Siliuk on 11.12.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSMenuVC.h"
#import "BSMenuCell.h"
#import "BSScheduleVC.h"
#import "BSTutorialVC.h"
#import "BSSettingsVC.h"
#import "BSAchivementsVC.h"
#import "BSDataManager.h"

#import "BSConstants.h"
@import MessageUI;

NSString * const kBSMenuItemType = @"kBSMenuItemType";

NSString * const kBSMenuItemTitle = @"kBSMenuItemTitle";
NSString * const kBSMenuItemImage = @"kBSMenuItemImage";
NSString * const kBSMenuItemClass = @"kBSMenuItemClass";

NSString * const kBSMenuItemSchedule = @"kBSMenuItemSchedule";

NSString * const kBSMenuCell = @"kBSMenuCell";



@interface BSMenuVC () <UITableViewDataSource, UITableViewDelegate, MFMailComposeViewControllerDelegate, AMSlideMenuDelegate>
@property (strong, nonatomic) UIView *fixView;
@end

@implementation BSMenuVC

- (instancetype)init
{
    self = [super initWithNibName:NSStringFromClass([BSMenuVC class]) bundle:nil];
    if (self) {
    }
    return self;
}

- (void)viewDidLoad {
    
    [super viewDidLoad];
    [self updateMenuItems];
    self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    [self.tableView registerNib:[UINib nibWithNibName:NSStringFromClass([BSMenuCell class]) bundle:nil] forCellReuseIdentifier:kBSMenuCell];

    self.tableView.backgroundColor = [UIColor darkGrayColor];
    self.view.backgroundColor = [UIColor darkGrayColor];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(schedulesUpdate)
                                                 name:kSchedulesGetUpdated
                                               object:nil];
    self.mainVC.slideMenuDelegate = self;
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)addFixView {
    
    if (!self.fixView) {
        self.fixView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 20)];
        self.fixView.backgroundColor = [UIColor darkGrayColor];
        [self.mainVC.view insertSubview:self.fixView aboveSubview:self.view];
    }
}

- (void)removeFixView {
    [self.fixView removeFromSuperview];
    self.fixView = nil;
}

//===============================================INDEX METHODS===========================================
#pragma mark - Index methods
- (NSIndexPath*)indexPathForGroupNumber:(NSString*)groupNumber {
    NSIndexPath *indexPath;
    for (NSDictionary* menuItemData in self.menuItems) {
        if ([menuItemData[kBSMenuItemType] isEqual:@(BSMenuItemSchedule)]) {
            if (!groupNumber || [[[menuItemData[kBSMenuItemSchedule] group] groupNumber] isEqual:groupNumber]) {
                indexPath = [NSIndexPath indexPathForRow:[self.menuItems indexOfObject:menuItemData] inSection:0];
                break;
            }
        }
    }
    return indexPath;
}
- (NSIndexPath*)settingsIndexPath {
    NSIndexPath *indexPath;
    for (NSDictionary* menuItemData in self.menuItems) {
        if ([menuItemData[kBSMenuItemType] isEqual:@(BSMenuItemSettings)]) {
            indexPath = [NSIndexPath indexPathForRow:[self.menuItems indexOfObject:menuItemData] inSection:0];
            break;
        }
    }
    return indexPath;
}
- (void)openVCAtIndexPath:(NSIndexPath*)indexPath {
    [self showVcForMenuItemData:self.menuItems[indexPath.row]];
}
//===============================================SLIDE MENU DELEGATE===========================================
#pragma mark - Slide menu delegate

- (void)leftMenuWillClose {
    [self removeFixView];
}

- (void)leftMenuDidClose {
    [self selectCellAtIndexPath:nil];
    [[NSNotificationCenter defaultCenter] postNotificationName:kMenuDidClose object:self];
}

- (void)leftMenuDidOpen {
    [self addFixView];
    
    NSIndexPath *currVCIndexPath = [self currentControllerIndexPath];
    if (currVCIndexPath) {
        [self selectCellAtIndexPath:currVCIndexPath];
    }
}

- (NSIndexPath*)currentControllerIndexPath {
    NSIndexPath *currentControllerIndexPath;
    UIViewController *currentController = self.mainVC.currentActiveNVC.topViewController;
    BSSchedule *currentSchedule;
    if ([currentController isKindOfClass:[BSScheduleVC class]]) {
        currentSchedule = [(BSScheduleVC*)currentController schedule];
    }
    [self.tableView reloadData];
    for (NSDictionary *itemData in self.menuItems) {
        BOOL scheduleCell = NO;
        if ([itemData[kBSMenuItemType] isEqual:@(BSMenuItemSchedule)] && currentSchedule) {
            BSSchedule *itemSchedule = itemData[kBSMenuItemSchedule];
            scheduleCell = [itemSchedule isEqual:currentSchedule];
        }
        if ([NSStringFromClass([currentController class]) isEqual:NSStringFromClass(itemData[kBSMenuItemClass])] || scheduleCell) {
            NSInteger itemIndex = [self.menuItems indexOfObject:itemData];
            NSIndexPath *indexPath = [NSIndexPath indexPathForRow:itemIndex inSection:0];
            currentControllerIndexPath = indexPath;
            break;
        }
    }
    return currentControllerIndexPath;
}

//===============================================DATA===========================================
#pragma mark - Data

- (void)schedulesUpdate {
    [self updateMenuItems];
    [self.tableView reloadData];
}

- (void)updateMenuItems{
    NSMutableArray *menuItems = [NSMutableArray array];
    NSDictionary *itemData;
    
    NSArray *schedules = [[BSDataManager sharedInstance] schelules];
    for (BSSchedule *schedule in schedules) {
        NSInteger subgroup = [[schedule subgroup] integerValue];
        NSString* title = [NSString stringWithFormat:@"%@/%ld",schedule.group.groupNumber, (long)subgroup];
        itemData = @{kBSMenuItemType: @(BSMenuItemSchedule),
                     kBSMenuItemTitle: title,
                     kBSMenuItemImage: [UIImage imageNamed:@"menu_schedule"],
                     kBSMenuItemSchedule: schedule};
        [menuItems addObject:itemData];
    }

    itemData = @{kBSMenuItemType: @(BSMenuItemAchivements),
                 kBSMenuItemTitle: NSLocalizedString(@"L_Achivements", @"menu item title"),
                 kBSMenuItemImage: [UIImage imageNamed:@"menu_achivements"],
                 kBSMenuItemClass: [BSAchivementsVC class]};
    [menuItems addObject:itemData];
    
    itemData = @{kBSMenuItemType: @(BSMenuItemSettings),
                 kBSMenuItemTitle: NSLocalizedString(@"L_Settings", @"menu item title"),
                 kBSMenuItemImage: [UIImage imageNamed:@"menu_settings"],
                 kBSMenuItemClass: [BSSettingsVC class]};
    [menuItems addObject:itemData];

    itemData = @{kBSMenuItemType: @(BSMenuItemInfo),
                 kBSMenuItemTitle: NSLocalizedString(@"L_Info", @"menu item title"),
                 kBSMenuItemImage: [UIImage imageNamed:@"menu_info"],
                 kBSMenuItemClass: [BSTutorialVC class]};
    [menuItems addObject:itemData];
    
    itemData = @{kBSMenuItemType: @(BSMenuItemFeedback),
                 kBSMenuItemTitle: NSLocalizedString(@"L_Feedback", @"menu item title"),
                 kBSMenuItemImage: [UIImage imageNamed:@"menu_feedback"]};
    [menuItems addObject:itemData];

    self.menuItems = menuItems;
}

//===============================================UI===========================================
#pragma mark - UI

-(UIStatusBarStyle)preferredStatusBarStyle{
    return UIStatusBarStyleLightContent;
}

//===============================================TABLE VIEW===========================================
#pragma mark - Table view

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self.menuItems count];
}


- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    NSDictionary *menuItemData = [self.menuItems objectAtIndex:indexPath.row];
    
    BSMenuCell *menuCell = [tableView dequeueReusableCellWithIdentifier:kBSMenuCell forIndexPath:indexPath];
    NSString *title = menuItemData[kBSMenuItemTitle];
    [menuCell.cellLabel setText:title];
    [menuCell.iconIV setImage:menuItemData[kBSMenuItemImage]];


    NSIndexPath *selectedCellIndexPath = [tableView indexPathForSelectedRow];
    menuCell.separator.hidden = (selectedCellIndexPath.row == indexPath.row || selectedCellIndexPath.row - 1 == indexPath.row) ? YES : NO;
    menuCell.backgroundColor = [UIColor clearColor];
    return menuCell;
}

- (void)selectCellAtIndexPath:(NSIndexPath*)indexPath {
    for (UITableViewCell *cell in [self.tableView visibleCells]) {
        if ([cell isKindOfClass:[BSMenuCell class]]) {
            [[(BSMenuCell*)cell separator] setHidden:NO];
        }
    }
    [self.tableView selectRowAtIndexPath:indexPath animated:YES scrollPosition:UITableViewScrollPositionNone];
    UITableViewCell *currCell = [self.tableView cellForRowAtIndexPath:indexPath];
    if ([currCell isKindOfClass:[BSMenuCell class]]) {
        [[(BSMenuCell*)currCell separator] setHidden:YES];
    }
    NSIndexPath *prevCellIndexPath = [NSIndexPath indexPathForItem:indexPath.row - 1 inSection:0];
    UITableViewCell *prevCell = [self.tableView cellForRowAtIndexPath:prevCellIndexPath];
    if (prevCell && [prevCell isKindOfClass:[BSMenuCell class]]) {
        [[(BSMenuCell*)prevCell separator] setHidden:YES];
    }
}

#define DEFAULT_CELL_HEIGHT 44.0

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return DEFAULT_CELL_HEIGHT;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [self selectCellAtIndexPath:indexPath];
    NSDictionary *menuItemData = self.menuItems[indexPath.row];
    [self showVcForMenuItemData:menuItemData];
}

- (void)showVcForMenuItemData:(NSDictionary*)menuItemData {
    UIViewController *rootVC;
    BSMenuItem menuItem = [menuItemData[kBSMenuItemType] integerValue];
    switch (menuItem) {
        case BSMenuItemSchedule: {
            BSSchedule *schedule = menuItemData[kBSMenuItemSchedule];
            rootVC = [[BSScheduleVC alloc] initWithSchedule:schedule];
            break;
        }
        case BSMenuItemFeedback:
            [self showMailScreen];
            break;
        default: {
            rootVC = [[[menuItemData objectForKey:kBSMenuItemClass] alloc] init];
            break;
        }
    }
    if (rootVC) {
        UINavigationController *nvc = [[UINavigationController alloc] initWithRootViewController:rootVC];
        [self openContentNavigationController:nvc];
    } else {
        [self.mainVC closeLeftMenuAnimated:YES];
    }
}

//===============================================MAIL===========================================
#pragma mark - Mail
- (void)showMailScreen {
    if([MFMailComposeViewController canSendMail]) {
        MFMailComposeViewController *mailCont = [[MFMailComposeViewController alloc] init];
        mailCont.mailComposeDelegate = self;
        
        [mailCont setSubject:@"Bsuir Schedule app"];
        [mailCont setToRecipients:[NSArray arrayWithObject:@"devbudgged@gmail.com"]];
        [self presentViewController:mailCont animated:YES completion:^{
            [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];
        }];
    }
}


// Then implement the delegate method
- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError*)error {
    [self dismissViewControllerAnimated:YES completion:nil];
}


@end
//
//  BMWMenuCell.m
//  BMW club
//
//  Created by Anton Siliuk on 12.12.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSMenuCell.h"
#import "BSConstants.h"

@interface BSMenuCell()
@end
@implementation BSMenuCell

#define SEPARATOR_HEIGHT 0.5
#define IMAGE_OFFSET 5.0
- (void)willMoveToSuperview:(UIView *)newSuperview {
    [super willMoveToSuperview:newSuperview];
    
    self.separator = [[UIView alloc] initWithFrame:CGRectMake(CGRectGetMinX(self.cellLabel.frame),
                                                                 self.bounds.size.height - SEPARATOR_HEIGHT,
                                                                 self.bounds.size.width - CGRectGetMinX(self.cellLabel.frame),
                                                                 SEPARATOR_HEIGHT)];
    self.separator.backgroundColor = [[UIColor lightGrayColor] colorWithAlphaComponent:0.2];
    [self addSubview:self.separator];
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated {
    if (selected) {
        self.backgroundColor = BS_GRAY;
    } else {
        self.backgroundColor = [UIColor clearColor];
    }
}

- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated {
    [self setSelected:highlighted animated:animated];
}

@end
//
//  BSPairCell.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 18.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPairCell.h"
#import "BSTriangleView.h"
#import "NSDate+Compare.h"
#import "BSConstants.h"
#import "BSLecturerPreview.h"
#import "BSLabelWithImage.h"

#import "BSDayOfWeek+Number.h"
#import "BSDayWithWeekNum.h"

#import "UIImage+ImageEffects.h"

@interface BSPairCell()
@property (strong, nonatomic) NSMutableArray *lecturersPreviews;

@property (strong, nonatomic) IBOutlet UILabel *timeLabel;
@property (strong, nonatomic) IBOutlet BSTriangleView *triangleView;
@property (strong, nonatomic) IBOutlet UIView *pairTypeIndicator;
@property (strong, nonatomic) IBOutlet BSLabelWithImage *subjectNameLabel;
@property (strong, nonatomic) IBOutlet UILabel *auditoryLabel;
@property (strong, nonatomic) IBOutlet UIView *pairView;

@property (strong, nonatomic) IBOutlet BSLabelWithImage *weeksLabel;
@property (strong, nonatomic) IBOutlet BSLabelWithImage *subgroupsLabel;

@property (strong, nonatomic) UIVisualEffectView *effectView;
@property (strong, nonatomic) NSString *timeText;
@end
@implementation BSPairCell
@dynamic timeText;

- (NSMutableArray*)lecturersPreviews {
    if (!_lecturersPreviews) {
        _lecturersPreviews = [[NSMutableArray alloc] init];
    }
    return _lecturersPreviews;
}

#define CORNER_RADIUS 0.0
- (void)awakeFromNib {
    self.backgroundColor = [UIColor clearColor];
    
    [self.pairView.layer setCornerRadius:CORNER_RADIUS];
    self.pairView.layer.masksToBounds = YES;
    
    self.showingLecturers = NO;
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleThumbnailTap:)];
    [self addGestureRecognizer:tap];
}

#define OFFSET 10.0
#define PAIR_CELL_ANIMATION_DURATION 0.3
- (void)makeSelected:(BOOL)selected {
    if ([self.lecturersPreviews count] < 2) {
        return;
    }
    for (BSLecturerPreview *lecturerPreview in self.lecturersPreviews) {
        NSInteger lectorerPreviewIndex = [self.lecturersPreviews indexOfObject:lecturerPreview];
        CGRect lecturerPreviewFrame = lecturerPreview.frame;

        CGFloat edgeX = CGRectGetMaxX(self.timeLabel.frame) + OFFSET;

        CGFloat minX;
        CGFloat maxX = CGRectGetMaxX(self.pairView.frame) - OFFSET - CGRectGetWidth(lecturerPreviewFrame);
        if (selected) {
            minX = maxX -([self.lecturersPreviews count] - 1)*(CGRectGetWidth(lecturerPreviewFrame) + OFFSET);
        } else {
            minX = CGRectGetMaxX(self.pairView.frame) - CGRectGetWidth(lecturerPreviewFrame) - OFFSET*[self.lecturersPreviews count];
        }
        if (minX < edgeX) {
            minX = edgeX;
        }
        CGFloat distance = (maxX - minX) / (CGFloat)([self.lecturersPreviews count] - 1);
        lecturerPreviewFrame.origin.x = minX + lectorerPreviewIndex*distance;
        lecturerPreviewFrame.origin.y += (selected ? -1 : 1) * 5.0f;

        CGFloat rotateAngelPart = ((self.showingLecturers) ? 1 : -1)*2*M_PI/3.0;
        
        [UIView beginAnimations:@"lecturer IV animations 1" context:nil];
        [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
        lecturerPreview.transform = CGAffineTransformMakeRotation(rotateAngelPart);
        [UIView commitAnimations];

        [UIView beginAnimations:@"lecturer IV animations 2" context:nil];
        [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
        lecturerPreview.transform = CGAffineTransformMakeRotation(2*rotateAngelPart);
        [UIView commitAnimations];

        [UIView beginAnimations:@"lecturer IV animations 3" context:nil];
        [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
        lecturerPreview.transform = CGAffineTransformMakeRotation(3*rotateAngelPart);
        [UIView commitAnimations];

        [UIView beginAnimations:@"Movement animations" context:nil];
        [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
        lecturerPreview.frame = lecturerPreviewFrame;
        lecturerPreview.lecturerNameLabel.hidden = !selected;
        [UIView commitAnimations];
    }
    
    [UIView beginAnimations:@"Name disappear animation" context:nil];
    [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
    self.subjectNameLabel.alpha = (selected) ? 0.0 : 1.0;
    self.auditoryLabel.alpha = (selected) ? 0.0 : 1.0;
    self.weeksLabel.alpha = (selected) ? 0.0 : 1.0;
    self.subgroupsLabel.alpha = (selected) ? 0.0 : 1.0;

    [UIView commitAnimations];
    self.showingLecturers = selected;
}


- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated {}
- (void)setSelected:(BOOL)selected animated:(BOOL)animated {}

- (NSString*)timeText {
    return [self.timeLabel.attributedText string];
}

#define LINE_HEIGHT 16.0
#define FONT_SIZE_24_h 16.0
#define FONT_SIZE_12_h 14.0

- (void)setTimeText:(NSString *)timeText {
    if (!SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        [self.timeLabel setAdjustsFontSizeToFitWidth:NO];
    }
    NSMutableAttributedString* attrTimeString = [[NSMutableAttributedString alloc] initWithString:timeText];
    NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
    [style setMaximumLineHeight:LINE_HEIGHT];
    [style setAlignment:NSTextAlignmentCenter];
    [attrTimeString addAttribute:NSParagraphStyleAttributeName
                       value:style
                       range:NSMakeRange(0, [timeText length])];

    [attrTimeString addAttribute:NSFontAttributeName
                           value:[UIFont fontWithName:@"OpenSans-Light" size:[self is24format] ? FONT_SIZE_24_h : FONT_SIZE_12_h]
                           range:NSMakeRange(0, [timeText length])];
    self.timeLabel.attributedText = attrTimeString;
}

- (BOOL)is24format {
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setLocale:[NSLocale currentLocale]];
    [formatter setDateStyle:NSDateFormatterNoStyle];
    [formatter setTimeStyle:NSDateFormatterShortStyle];
    NSString *dateString = [formatter stringFromDate:[NSDate date]];
    NSRange amRange = [dateString rangeOfString:[formatter AMSymbol]];
    NSRange pmRange = [dateString rangeOfString:[formatter PMSymbol]];
    BOOL is24h = (amRange.location == NSNotFound && pmRange.location == NSNotFound);
    return is24h;
}


- (void)setPairTypeIndicatorColor:(UIColor *)pairTypeIndicatorColor{
    _pairTypeIndicatorColor = pairTypeIndicatorColor;
    self.pairTypeIndicator.backgroundColor = pairTypeIndicatorColor;
    self.triangleView.fillColor = pairTypeIndicatorColor;
}

- (void)setupWithPair:(BSPair *)pair inDay:(id<BSDay>)day forSchedule:(BSSchedule*)schedule {
    [self setupWithPair:pair inDay:day forSchedule:schedule weekMode:NO widgetMode:NO];
}
- (void)setupWithPair:(BSPair *)pair inDay:(id<BSDay>)day forSchedule:(BSSchedule*)schedule widgetMode:(BOOL)widgetMode {
    [self setupWithPair:pair inDay:day forSchedule:schedule weekMode:NO widgetMode:widgetMode];
}
- (void)setupWithPair:(BSPair*)pair inDay:(id<BSDay>)day forSchedule:(BSSchedule*)schedule weekMode:(BOOL)weekMode {
    [self setupWithPair:pair inDay:day forSchedule:schedule weekMode:weekMode widgetMode:NO];
}
- (void)setupWithPair:(BSPair*)pair inDay:(id<BSDay>)day forSchedule:(BSSchedule*)schedule weekMode:(BOOL)weekMode widgetMode:(BOOL)widgetMode {

    UIColor *tintColorForImages = widgetMode ? [UIColor whiteColor] : BS_DARK;
    //-------------------------------Weeks label---------------------------------
    self.weeksLabel.hidden = !weekMode;
    NSArray *weeks = [pair.weeks sortedArrayUsingDescriptors:@[[NSSortDescriptor sortDescriptorWithKey:@"weekNumber" ascending:YES]]];
    
    NSMutableString *weekNumbersStr = [NSMutableString string];
    for (BSWeekNumber *weekNum in weeks) {
        NSInteger weekNumber = [weekNum.weekNumber integerValue];
        if (weekNumber == 0) {
            weekNumbersStr = [NSMutableString stringWithString:@"1,2,3,4"];
            break;
        } else {
            if (![weekNumbersStr isEqual:@""]) {
                [weekNumbersStr appendString:@","];
            }
            [weekNumbersStr appendFormat:@"%ld",(long)weekNumber];
        }
    }

    
    [self.weeksLabel setText:weekNumbersStr];
    [self.weeksLabel addImage:[[UIImage imageNamed:@"calendar"] imageWithOverlayColor:tintColorForImages] withAligment:BSImageAligmentLeft];

    //-------------------------------Subgroups label---------------------------------
    NSInteger subgroupNum = [pair.subgroupNumber integerValue];
    self.subgroupsLabel.hidden = !weekMode || subgroupNum == 0;
    NSString *subgrStr = [NSString stringWithFormat:@"%ld",(long)subgroupNum];
    
    [self.subgroupsLabel setText:subgrStr];
    [self.subgroupsLabel addImage:[[UIImage imageNamed:@"group"] imageWithOverlayColor:tintColorForImages] withAligment:BSImageAligmentLeft];

    //-------------------------------Other---------------------------------
    NSSortDescriptor *nameSort = [[NSSortDescriptor alloc] initWithKey:@"firstName" ascending:NO];

    [self.subjectNameLabel setText:pair.subject.name];
    self.subjectNameLabel.imageView.hidden = YES;
    if ([pair.subgroupNumber integerValue] != 0 && !weekMode) {
        [self.subjectNameLabel addImage:[[UIImage imageNamed:@"group"] imageWithOverlayColor:tintColorForImages] withAligment:BSImageAligmentRight];
    }
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"HH:mm"];
    NSString *timeString = [NSString stringWithFormat:@"%@\n-\n%@", [formatter stringFromDate:pair.startTime],[formatter stringFromDate:pair.endTime]];
    [self setTimeText:timeString];
    
    NSMutableString *auditoryString = [NSMutableString string];
    for (BSAuditory *auditory in pair.auditories) {
        if (![auditoryString isEqual:@""]) {
            [auditoryString appendString:@", "];
        }
        [auditoryString appendString:auditory.address];
    }
    [self.auditoryLabel setText:auditoryString];
    
//    [self clearLecturersPreviews];
//    for (BSLecturerPreview *preview in self.lecturersPreviews) {
//        [preview removeFromSuperview];
//    }
    for (BSLecturerPreview *preview in self.lecturersPreviews) {
        preview.hidden = YES;
    }
    NSArray *lecturers = [[pair.lecturers allObjects] sortedArrayUsingDescriptors:@[nameSort]];
    for (BSLecturer *lecturer in lecturers) {
        NSInteger lecturerIndex = [lecturers indexOfObject:lecturer];
        NSInteger lecturerReverseIndex = [lecturers count] - lecturerIndex;
        CGFloat lecturerOffset = lecturerReverseIndex *OFFSET;

        BSLecturerPreview *lecturerPreview;
        if ([self.lecturersPreviews count] > lecturerIndex) {
            lecturerPreview = [self.lecturersPreviews objectAtIndex:lecturerIndex];
            lecturerPreview.hidden = NO;
            [lecturerPreview updateWithLecturer:lecturer];
        } else {
            lecturerPreview = [[BSLecturerPreview alloc] init];
            [self.pairView addSubview:lecturerPreview];
            
            lecturerPreview.translatesAutoresizingMaskIntoConstraints = NO;
            [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:[lecturerPreview(width)]-offset-|" options:0 metrics:@{@"offset": @(lecturerOffset), @"width": @(LECTURER_IMAGE_WIDTH)} views:NSDictionaryOfVariableBindings(lecturerPreview)]];
            [self addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[lecturerPreview]|" options:0 metrics:nil views:NSDictionaryOfVariableBindings(lecturerPreview)]];
            [lecturerPreview setupWithLecturer:lecturer];
            [self.lecturersPreviews addObject:lecturerPreview];
        }

    }
    
    CGRect subjectNameFrame = self.subjectNameLabel.frame;
    subjectNameFrame.size.width = CGRectGetMaxX(self.frame) - subjectNameFrame.origin.x - OFFSET;
//    if (thumbnail != nil) {
//        subjectNameFrame.size.width -= (CGRectGetWidth(self.lecturerIV.frame) + OFFSET);
//    }
    self.subjectNameLabel.frame = subjectNameFrame;
    
    self.pairTypeIndicatorColor = [pair colorForPairType];
    [self setupTriangleForPair:pair inDay:day forSchedule:schedule weekMode:weekMode];
    
    if (widgetMode) {
        [self updateUIForWidget];
    }
}

- (void)clearLecturersPreviews {
    for (BSLecturerPreview *lecturerPreview in self.lecturersPreviews) {
        [lecturerPreview removeFromSuperview];
    }
    [self.lecturersPreviews removeAllObjects];
    
}

- (void)setupTriangleForPair:(BSPair*)pair inDay:(id<BSDay>)day forSchedule:(BSSchedule*)schedule weekMode:(BOOL)weekMode {
    NSDate *now = [NSDate date];
    BOOL cellForCurrentDay = NO;
    if ([day isKindOfClass:[BSDayWithWeekNum class]]) {
        cellForCurrentDay = [now isEqualToDateWithoutTime:[(BSDayWithWeekNum*)day date]];
    }
    if (!cellForCurrentDay) {
        self.triangleView.hidden = YES;
        return;
    }
    NSArray *pairs = [day pairsForSchedule:schedule weekFormat:weekMode];
    NSDate *startOfTimeInterval = pair.startTime;
    NSDate *endOfTimeInterval = pair.endTime;
    NSDate *startOfTimeIntervalWithOffset = pair.startTime;
    NSDate *endOfTimeIntervalWithOffset = pair.endTime;
    NSInteger currentPairIndex = [pairs indexOfObject:pair];
    NSTimeInterval pairLength = fabs([[pair.endTime onlyTime] timeIntervalSinceDate:[pair.startTime onlyTime]]);
    NSTimeInterval indicatorTimeLength = pairLength * CGRectGetHeight(self.triangleView.bounds)/(2.0* CGRectGetHeight(self.bounds));
    if (currentPairIndex != 0) { //not first
        startOfTimeInterval = [[pairs objectAtIndex:currentPairIndex-1] endTime];
        startOfTimeIntervalWithOffset = [startOfTimeInterval dateByAddingTimeInterval:-indicatorTimeLength];
    }
    if (currentPairIndex != [pairs count] - 1) { // not last
        endOfTimeInterval = [[pairs objectAtIndex:currentPairIndex+1] startTime];
        endOfTimeIntervalWithOffset = [endOfTimeInterval dateByAddingTimeInterval:indicatorTimeLength];
    }
    BOOL showIndicator = [now isTimeBetweenTime:startOfTimeIntervalWithOffset andTime:endOfTimeIntervalWithOffset] && cellForCurrentDay;
    if (showIndicator) {
        CGFloat triangleOriginrY = -CGRectGetHeight(self.triangleView.bounds);
        if ([now isTimeBetweenTime:startOfTimeInterval andTime:pair.startTime]) {
            triangleOriginrY = -self.triangleView.bounds.size.height / 2.0;
        } else if ([now isTimeBetweenTime:pair.endTime andTime:endOfTimeInterval]) {
            triangleOriginrY = CGRectGetHeight(self.frame) - 2 - self.triangleView.bounds.size.height / 2.0;
        } else {
            NSTimeInterval firstBreak = fabs([[pair.startTime onlyTime] timeIntervalSinceDate:[startOfTimeInterval onlyTime]]);
            NSTimeInterval secondBreak = fabs([[pair.endTime onlyTime] timeIntervalSinceDate:[endOfTimeInterval onlyTime]]);
            NSTimeInterval intervalLength = pairLength + 2*indicatorTimeLength ;
            //???
            NSTimeInterval timePassed = fabs([[now onlyTime] timeIntervalSinceDate:[[startOfTimeInterval dateByAddingTimeInterval:-indicatorTimeLength] onlyTime]]);
            if ([now compareTime:pair.startTime] == NSOrderedDescending) {
                timePassed -= firstBreak;
            }
            if ([now compareTime:pair.endTime] == NSOrderedDescending) {
                timePassed -= secondBreak;
            }
            triangleOriginrY += (CGRectGetHeight(self.frame) - 2 + CGRectGetHeight(self.triangleView.bounds))* (CGFloat)timePassed / intervalLength;
            
        }
        [self.pairView.constraints enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
            NSLayoutConstraint *constraint = (NSLayoutConstraint *)obj;
            if (constraint.firstItem == self.triangleView || constraint.secondItem == self.triangleView) {
                [self.pairView removeConstraint:constraint];
            }
        }];
        [self.triangleView removeConstraints:self.triangleView.constraints];
        NSDictionary *metrics = @{@"triangleOriginrY" : @(triangleOriginrY), @"offset" : @(self.pairTypeIndicator.frame.size.width)};
        NSDictionary *views = NSDictionaryOfVariableBindings(_triangleView);
        [self.pairView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"|-offset-[_triangleView(5.0)]" options:0 metrics:metrics views:views]];
        [self.pairView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|-triangleOriginrY-[_triangleView(20.0)]" options:0 metrics:metrics views:views]];

        self.triangleView.hidden = NO;
        [self.triangleView setNeedsDisplay];
    } else {
        self.triangleView.hidden = YES;
    }

}

- (void)updateUIForWidget {
    self.timeLabel.textColor = [UIColor whiteColor];
    self.subjectNameLabel.textColor = [UIColor whiteColor];
    self.auditoryLabel.textColor = [UIColor whiteColor];
    self.backgroundColor = [UIColor clearColor];
    self.pairView.backgroundColor = [UIColor clearColor];
    if (!self.effectView) {
        UIVisualEffect *blur = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];
        self.effectView = [[UIVisualEffectView alloc] initWithEffect:blur];
        self.effectView.translatesAutoresizingMaskIntoConstraints = NO;
        [self.pairView addSubview:self.effectView];
        [self.pairView sendSubviewToBack:self.effectView];
        
        NSDictionary *views = NSDictionaryOfVariableBindings(_effectView);

        [self.pairView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[_effectView]|"
                                                                              options:0
                                                                              metrics:nil
                                                                                views:views]];
        [self.pairView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[_effectView]|"
                                                                              options:0
                                                                              metrics:nil
                                                                                views:views]];

    }
}
- (void)handleThumbnailTap:(UITapGestureRecognizer*)sender {
    NSPredicate *visible = [NSPredicate predicateWithFormat:@"hidden = NO"];
    NSArray *visibleLecturers = [self.lecturersPreviews filteredArrayUsingPredicate:visible];
    if ([visibleLecturers count] < 2) {
        BSLecturerPreview *lecturerPreview = [visibleLecturers lastObject];
        CGRect thumbFrame = [self convertRect:lecturerPreview.lecturerIV.frame fromView:lecturerPreview];
        [self.delegate thumbnailForLecturer:lecturerPreview.lecturer withStartFrame:thumbFrame getTappedOnCell:self];
    } else {
        if (self.showingLecturers) {
            BOOL findObject = NO;
            CGPoint tapPoint = [sender locationInView:self];
            for (BSLecturerPreview *lecturerPreview in visibleLecturers) {
                if (CGRectContainsPoint(lecturerPreview.frame, tapPoint)) {
                    CGRect thumbFrame = [self convertRect:lecturerPreview.lecturerIV.frame fromView:lecturerPreview];
                    [self.delegate thumbnailForLecturer:lecturerPreview.lecturer withStartFrame:thumbFrame getTappedOnCell:self];
                    findObject = YES;
                }
            }
            if (!findObject) {
                [self makeSelected:!self.showingLecturers];
            }
        } else {
            [self makeSelected:!self.showingLecturers];
        }
    }

}
@end
//
//  ViewController.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 16.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSScheduleVC.h"
#import "BSConstants.h"
#import "BSDataManager.h"
#import "BSPairCell.h"
#import "BSDayWithWeekNum.h"

#import "BSLecturer+Thumbnail.h"
#import "NSString+Transiterate.h"
#import "NSDate+Compare.h"
#import "UIView+Screenshot.h"
#import "UIViewController+Achivements.h"
#import "NSUserDefaults+Share.h"
#import "UIViewController+Presentation.h"

#import "BSScheduleParser.h"
#import "BSAchivementManager.h"
#import "BSLecturerVC.h"
#import "BSAchivementUnlockedVC.h"

#import "BSDay.h"

#import "BSDayOfWeek+Number.h"
#import "BSDayWithWeekNum.h"

#import "UIViewController+AMSlideMenu.h"

#import "BSUtils.h"

static NSString * const kCellID = @"Pair cell id";


@interface BSScheduleVC () <UITableViewDataSource, UITableViewDelegate, NSFetchedResultsControllerDelegate,
BSPairCellDelegate, AMSlideMenuDelegate, UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>

@property (strong, nonatomic) IBOutlet UITableView *tableView;
@property (strong, nonatomic) NSMutableArray *days;

@property (strong, nonatomic) UIView *loadindicatorView;
@property (strong, nonatomic) BSDayWithWeekNum *dayToHighlight;

@property (strong, nonatomic) NSArray *easterEggStrings;

@end

@implementation BSScheduleVC

- (NSArray*)easterEggStrings {
    if (!_easterEggStrings) {
        _easterEggStrings = @[@"Остановись",
                              @"Подумай о будущем",
                              @"Не делай этого",
                              @"У тебя еще вся жизнь впереди",
                              @"Зачем тебе знать что будет потом",
                              @"Там ничего нет",
                              @"Жизнь тлен",
                              @"Только не листай до конца",
                              @"Ты не должен об этом узнать",
                              @"Предупреждаю тебя парень",
                              @"Там ничего нет",
                              @"ОСТАНОВИСЬ",
                              @"Ты сломаешь скролл",
                              @"Ты сломаешь всю таблицу",
                              @"Ее не починить",
                              @"Подумай о своих родных",
                              @"Остановись ради них",
                              @"Сколько можно",
                              @"Мне лень тебя переубеждать",
                              @"Ты странный человек",
                              @"На тебя еще не косятся люди?",
                              @"Для чего ты это делаешь?",
                              @"Кто тебя нанял?",
                              @"Я устала скролиться",
                              @"У меня нет конца",
                              @"Это бессмысленно",
                              @"Ты зря проживаешь свою жизнь",
                              @"Сходи покушай",
                              @"Иди попрограммируй",
                              @"Ты же студент БГУИРа",
                              @"Делай лабы",
                              @"Делай лабы",
                              @"Делай лабы",
                              @"Делай лабы",
                              @"Делай лабы",
                              @"Я пытался помочь",
                              @"ОТСТАНЬ ОТ МЕНЯ",
                              @"Нормально же общались",
                              @"Чего ты",
                              @"АЙ, ВСЕ!",
                              @"АЙ, ВСЕ!",
                              @"АЙ, ВСЕ!",
                              @"Тебе лишь бы меня поскролить",
                              @"А на мои чувства тебе наплевать",
                              @"Ты бкссчувственный",
                              @"У таблиц тоже есть чувства",
                              @"Тебе не интересно что мне нужно",
                              @"Ну и листай себе дальше",
                              @"Я не хочу общаться",
                              @"Ты настырный",
                              @"И упорный",
                              @"Листай дальше",
                              @"Тебя ждут несметные богатства и слава",
                              @"Признание женщин",
                              @"Успех",
                              @"Уже совсем скоро",
                              @"Еще чуть чуть",
                              @"Еще чуть чуть.",
                              @"Еще чуть чуть..",
                              @"Еще чуть чуть..."];
    }
    return _easterEggStrings;
}

- (instancetype)initWithSchedule:(BSSchedule *)schedule
{
    self = [super initWithNibName:NSStringFromClass([self class]) bundle:nil];
    if (self) {
        self.schedule = schedule;
    }
    return self;
}

- (UIView*)loadindicatorView {
    if (!_loadindicatorView) {
        _loadindicatorView = [[UIView alloc] initWithFrame:self.navigationController.view.bounds];
        _loadindicatorView.backgroundColor = [UIColor blackColor];
        UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
        activityIndicator.center = CGPointMake(_loadindicatorView.bounds.size.width / 2.0, _loadindicatorView.bounds.size.height / 2.0);
        [_loadindicatorView addSubview:activityIndicator];
        [activityIndicator startAnimating];
    }
    return _loadindicatorView;
}

- (NSMutableArray*)days {
    if (!_days) {
        _days = [NSMutableArray array];
    }
    return _days;
}

- (void)viewDidLoad {
    [super viewDidLoad];

    UIView* bview = [[UIView alloc] init];
    bview.backgroundColor = BS_LIGHT_GRAY;
    [self.tableView setBackgroundView:bview];


    self.tableView.contentInset = UIEdgeInsetsMake(0, 0, 100, 0);
    [self.tableView registerNib:[UINib nibWithNibName:NSStringFromClass([BSPairCell class]) bundle:nil] forCellReuseIdentifier:kCellID];
    [self.navigationController.view addSubview:self.loadindicatorView];
    self.loadindicatorView.hidden = YES;

    [self setupFormatChangeButtonForWeekFormat:self.weekFormat];
    [self setNavBarLabel];
    [self getScheduleData];
    [self.navigationController.navigationBar setBarStyle:UIBarStyleDefault];

    if ([BSScheduleParser scheduleExpiresForGroup:self.schedule.group]) {
        __weak typeof(self) weakself = self;
        [BSScheduleParser scheduleForGroup:self.schedule.group withSuccess:^{
            [weakself updateSchedule];
        } failure:nil];
    }

    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(applicationBecomeActive)
                                                 name:UIApplicationDidBecomeActiveNotification
                                               object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(leftMenuDidClose)
                                                 name:kMenuDidClose
                                               object:nil];
}

- (void)leftMenuDidClose {
    [self applicationBecomeActive];
}

- (void)applicationBecomeActive {
    NSDate *now = [NSDate date];
    NSCalendar *calendar = [NSCalendar autoupdatingCurrentCalendar];
    NSUInteger preservedComponents;
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"8.0")) {
        preservedComponents = (NSCalendarUnitHour | NSCalendarUnitMinute);
    } else {
        preservedComponents = (NSHourCalendarUnit | NSMinuteCalendarUnit);
    }
    NSDateComponents *dateComponents = [calendar components:preservedComponents fromDate:now];

    if (dateComponents.hour == 0 && dateComponents.minute == 0) {
        [self triggerAchivementWithType:BSAchivementTypeWerewolf];
    }
//    [self triggerAchivementWithType:BSAchivementTypeSocial];
    [self updateUI];
}

- (void)setNavBarLabel {
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 0, 44)];
    label.backgroundColor = [UIColor clearColor];
    label.numberOfLines = 2;
    label.textAlignment = NSTextAlignmentCenter;
    NSMutableAttributedString *titleString= [[NSMutableAttributedString alloc] initWithString:LZD(@"L_Schedule")
                                                                                   attributes:@{NSForegroundColorAttributeName:[UIColor whiteColor],
                                                                                                NSFontAttributeName: [UIFont fontWithName:@"OpenSans" size:16.0]}];
    NSAttributedString *groupString = [[NSAttributedString alloc] initWithString:[NSString stringWithFormat:@"\n%@/%@",self.schedule.group.groupNumber,self.schedule.subgroup]
                                                                    attributes:@{NSForegroundColorAttributeName:[[UIColor whiteColor]
                                                                                                                 colorWithAlphaComponent:0.7],
                                                                                 NSFontAttributeName: [UIFont systemFontOfSize:14.0]}];
    [titleString appendAttributedString:groupString];
    label.attributedText = titleString;
    self.navigationItem.titleView = label;

}


- (void)setupFormatChangeButtonForWeekFormat:(BOOL)weekFormat {
    UIButton *formatChangeButtonButton = [UIButton buttonWithType:UIButtonTypeCustom];
    formatChangeButtonButton.frame = CGRectMake(0, 0, 40, 40);
    BSWeekNumber *currentWeekNum = [[BSDataManager sharedInstance] currentWeek];
    NSString *daylyIconName = [NSString stringWithFormat:@"daily_%ld",[currentWeekNum.weekNumber longValue]];
    [formatChangeButtonButton setImage:[UIImage imageNamed:(weekFormat) ? daylyIconName : @"weekly"]
                              forState:UIControlStateNormal];
    [formatChangeButtonButton setImage:[UIImage imageNamed:(weekFormat) ? daylyIconName : @"weekly"]
                              forState:UIControlStateNormal | UIControlStateHighlighted];
    [formatChangeButtonButton addTarget:self action:@selector(changeWeekType) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *formatChangeBarButton = [[UIBarButtonItem alloc] initWithCustomView:formatChangeButtonButton];
    formatChangeBarButton.tintColor = [UIColor whiteColor];
    self.navigationItem.rightBarButtonItem = formatChangeBarButton;
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)getScheduleData {
    if (self.schedule.group) {
        [self updateSchedule];
    }
}

- (void)changeWeekType {
    self.weekFormat = !self.weekFormat;
    [self setupFormatChangeButtonForWeekFormat:self.weekFormat];
    [self updateSchedule];
}

- (void)updateSchedule {
    [self hideLoadingView];

    self.dayToHighlight = [[BSDataManager sharedInstance] dayToHighlightInSchedule:self.schedule weekMode:self.weekFormat];

    self.days = nil;
    if (self.weekFormat) {
        [self loadWeekSchedule];
    } else {
        [self loadScheduleForDaysCount:PREVIOUS_DAY_COUNT backwards:YES];
        [self loadScheduleForDaysCount:DAYS_LOAD_STEP backwards:NO];
    }

    [self.tableView reloadData];
    NSInteger highlightedSectionIndex = 0;
    for (NSInteger index = 0; index < [self.days count]; index++) {
        id<BSDay> day = [self.days objectAtIndex:index];
        if ([day isEqualToDayWithWeekNum:self.dayToHighlight]) {
            highlightedSectionIndex = index;
            break;
        }
    }

    if ([self.days count] > 0) {
        [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:highlightedSectionIndex]
                              atScrollPosition:UITableViewScrollPositionTop
                                      animated:YES];
    }
}

- (void)loadWeekSchedule {
    NSPredicate *pairPredicate = [NSPredicate predicateWithBlock:^BOOL(id evaluatedObject, NSDictionary *bindings) {
        BOOL filter = NO;
        if ([evaluatedObject isKindOfClass:[BSDayOfWeek class]]) {
            filter = [[(BSDayOfWeek*)evaluatedObject pairsForSchedule:self.schedule weekFormat:self.weekFormat] count] > 0;
        }
        return filter;
    }];
    NSArray *days = [[[BSDataManager sharedInstance] days] filteredArrayUsingPredicate:pairPredicate];
    self.days = [days mutableCopy];
}

#define MAAX_TRY_COUNT 100
- (NSInteger)loadScheduleForDaysCount:(NSInteger)daysCount backwards:(BOOL)backwards {
    NSDate *now = [NSDate date];
    NSDate *dayDate = now; // to show two previous days
    if ([self.days count] > 0) {
        if (backwards) {
            dayDate = [[self.days firstObject] date];
        } else {
            dayDate = [[[self.days lastObject] date] dateByAddingTimeInterval:DAY_IN_SECONDS];
        }
    }
    NSInteger daysAdded = 0;
    NSInteger tryies = 0;
    while (daysAdded < daysCount && tryies < MAAX_TRY_COUNT) {
        BSDayWithWeekNum *dayWithWeekNum = [[BSDayWithWeekNum alloc] initWithDate:dayDate];
        if (dayWithWeekNum.dayOfWeek && [[dayWithWeekNum pairsForSchedule:self.schedule weekFormat:self.weekFormat] count] > 0 && !([dayDate isEqual:now] && backwards)) {
            if (backwards) {
                [self.days insertObject:dayWithWeekNum atIndex:0];
            } else {
                [self.days addObject:dayWithWeekNum];

            }
            daysAdded++;
        }
        tryies ++;
        dayDate = [dayDate dateByAddingTimeInterval:(backwards ? -1 : 1)*DAY_IN_SECONDS];
    }
    return daysAdded;
}

- (NSURL *)applicationDocumentsDirectory {
    // The directory the application uses to store the Core Data store file. This code uses a directory named "com.saute.Bsuir_Schedule" in the application's documents directory.
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}

//===============================================TABLE VIEW===========================================
#pragma mark - Table View

- (NSArray*)pairsForDay:(id<BSDay>)day {

    return [day pairsForSchedule:self.schedule weekFormat:self.weekFormat];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return [self.days count];
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [[self pairsForDay:[self.days objectAtIndex:section]] count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    BSPairCell *cell = [tableView dequeueReusableCellWithIdentifier:kCellID forIndexPath:indexPath];
    id<BSDay> day = [self.days objectAtIndex:indexPath.section];
    NSArray *pairs = [self pairsForDay:day];
    BSPair *pair = [pairs objectAtIndex:indexPath.row];
    cell.delegate = self;
    [cell setupWithPair:pair inDay:day forSchedule:self.schedule weekMode:self.weekFormat];
    return cell;
}

#define EASTERN_EGG_EDGE 50
-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    id<BSDay> day = [self.days objectAtIndex:section];
    NSDate *now = [NSDate date];
    BOOL currentDay = NO;
    BOOL tomorrow = NO;
    if ([day isKindOfClass:[BSDayWithWeekNum class]]) {
        currentDay = [now isEqualToDateWithoutTime:[(BSDayWithWeekNum*)day date]];
        tomorrow = [[now dateByAddingTimeInterval:DAY_IN_SECONDS] isEqualToDateWithoutTime:[(BSDayWithWeekNum*)day date]];
    } else if ([day isKindOfClass:[BSDayOfWeek class]]){
        BSDayOfWeek *dayOfWeek = [[BSDataManager sharedInstance] dayWithDate:now];
        NSInteger dayOfWeekNumber = [[[BSDataManager sharedInstance]dayNumberForDay:dayOfWeek] integerValue];
        NSInteger dayNumber = [[[BSDataManager sharedInstance]dayNumberForDay:day] integerValue];
        currentDay = dayOfWeekNumber == dayNumber;
        tomorrow = dayOfWeekNumber + 1 == dayNumber;
    }
    NSDateFormatter *df = [[NSDateFormatter alloc] init];
    [df setDateFormat:@"dd.MM.YY"];

    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, HEADER_HEIGHT)];
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(HEADER_LABEL_OFFSET_X, HEADER_LABEL_OFFSET_Y,
                                                               tableView.frame.size.width, HEADER_HEIGHT)];
    [label setFont:[UIFont fontWithName:@"OpenSans" size:HEADER_LABEL_FONT_SIZE]];

    [label setTextColor:BS_GRAY];
    [view addSubview:label];
    [view setBackgroundColor:BS_TABLE_VIEW_GRAY];
    [label setBackgroundColor:BS_TABLE_VIEW_GRAY];
    NSString *dayInfoString;
    if ([day isKindOfClass:[BSDayWithWeekNum class]]) {
        dayInfoString = [NSString stringWithFormat:@"%@  %@  %@  %@",
                         NSLocalizedString([@"Sh_" stringByAppendingString:[day dayOfWeekName]], nil),
                         [df stringFromDate:[(BSDayWithWeekNum*)day date]],
                         NSLocalizedString(@"L_Week", nil),
                         [[(BSDayWithWeekNum*)day weekNumber] weekNumber]];
    } else if ([day isKindOfClass:[BSDayOfWeek class]]){
        dayInfoString = NSLocalizedString([day dayOfWeekName], nil);
    }

    if ([day isEqualToDayWithWeekNum:self.dayToHighlight]) {
        if (currentDay) {
            dayInfoString = [NSString stringWithFormat:@"(%@)  %@",NSLocalizedString(@"L_Today", nil), dayInfoString];
        } else if (tomorrow) {
            dayInfoString = [NSString stringWithFormat:@"(%@)  %@",NSLocalizedString(@"L_Tomorrow", nil), dayInfoString];
        }
        [label setTextColor:BS_RED];
    }
    BOOL easterEggMode = NO;
    if (section >= EASTERN_EGG_EDGE) {
        NSInteger stringIndex = [self easterEggIndexForSection:section];
        if (stringIndex < [self.easterEggStrings count]) {
            if (section % 20 == 0) {
                dayInfoString = [self.easterEggStrings objectAtIndex:stringIndex];
                [label setTextColor:BS_BLUE];
            }
        } else {
            easterEggMode = YES;
        }
    }
    if (easterEggMode) {
        [self triggerAchivementWithType:BSAchivementTypeScroller];
    }
    if ([[NSUserDefaults sharedDefaults] boolForKey:kEasterEggMode] != easterEggMode) {
        [[NSUserDefaults sharedDefaults] setBool:easterEggMode forKey:kEasterEggMode];
    }
    [label setText:dayInfoString];
    return view;
}

- (NSInteger)easterEggIndexForSection:(NSInteger)section {
    return (section - EASTERN_EGG_EDGE) / 20;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return 70.0;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
//    return HEADER_HEIGHT+5.0;
    return 30.0;
}

- (BOOL)prefersStatusBarHidden {
    return NO;
}
//-------------------------------Scroll view---------------------------------

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
    if (!decelerate) {
        [self scrollingFinishScrollView:scrollView];
    }
}
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    [self scrollingFinishScrollView:scrollView];
}
- (void)scrollingFinishScrollView:(UIScrollView*)scrollView {
    if (scrollView.contentOffset.y >= (scrollView.contentSize.height - scrollView.bounds.size.height)) {
        if (!self.weekFormat) {
            NSLog(@"load more rows");
            NSInteger daysLoad = [self loadScheduleForDaysCount:DAYS_LOAD_STEP backwards:NO];
            NSIndexSet *indexSet = [NSIndexSet indexSetWithIndexesInRange:NSMakeRange(self.days.count - daysLoad, daysLoad)];
            [self.tableView insertSections:indexSet withRowAnimation:UITableViewRowAnimationBottom];
        }
    }

}

//-------------------------------Lecturer name view---------------------------------


- (void)deselectVisibleCells {
    for (BSPairCell *pairCell in [self.tableView visibleCells]) {
        if (pairCell.showingLecturers) {
            [pairCell makeSelected:NO];
        }
    }
}

//- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
//    BSPairCell *pairCell = (BSPairCell*)[tableView cellForRowAtIndexPath:indexPath];
//    if (pairCell) {
//        if (!pairCell.showingLecturerName) {
//            [self deselectVisibleCells];
//        }
//        [pairCell makeSelected:!pairCell.showingLecturerName];
//    }
//}

- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {
    [self deselectVisibleCells];
}

//===============================================UI===========================================
#pragma mark - UI

- (void)updateUI {
    BSDayWithWeekNum *day = [[BSDataManager sharedInstance] dayToHighlightInSchedule:self.schedule weekMode:self.weekFormat];
    if (![day isEqualToDayWithWeekNum:self.dayToHighlight]) {
        [self updateSchedule];
    }
    [self.tableView reloadData];
}


- (void)showLecturerVCForLecturer:(BSLecturer*)lecturer withStartFrame:(CGRect)startFrame{
    if (lecturer) {
        BSLecturerVC *lecturerVC = [[BSLecturerVC alloc] initWithLecturer:lecturer startFrame:startFrame];
        [self presentVCInCurrentContext:lecturerVC animated:NO];
    }
}


//===============================================LOADING SCREEN===========================================
#pragma mark - Loading screen

- (void)showLoadingView {
    if (self.loadindicatorView.hidden) {
        self.loadindicatorView.hidden = NO;
        self.loadindicatorView.alpha = 0;
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.5;
        }];
    }
}

- (void)hideLoadingView {
    if (!self.loadindicatorView.hidden) {
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.0;
        } completion:^(BOOL finished) {
            if (finished) {
                self.loadindicatorView.hidden = YES;
            }
        }];
    }
}
//===============================================BSPairCell DELEGATE===========================================
#pragma mark - BSPairCell delegate

- (void)thumbnailForLecturer:(BSLecturer*)lecturer withStartFrame:(CGRect)thumbnailFrame getTappedOnCell:(BSPairCell *)cell {
    NSIndexPath *indexPathOfCell = [self.tableView indexPathForCell:cell];
    if (indexPathOfCell) {
        CGRect startFrame = [self.navigationController.view convertRect:thumbnailFrame fromView:cell];
        [self showLecturerVCForLecturer:lecturer withStartFrame:startFrame];
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {

}

@end
//
//  BSGroupSelectVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 04.09.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSGroupSelectVC.h"

#import "BSScheduleParser.h"
#import "BSUtils.h"
#import "BSConstants.h"

@interface BSGroupSelectVC () <UITableViewDelegate, UITableViewDataSource, BSScheduleAddVCDelegate>
@property (strong, nonatomic) IBOutlet UITableView *tableView;
@property (strong, nonatomic) NSArray *groups;
@property (strong, nonatomic) UIView *loadindicatorView;
@end

@implementation BSGroupSelectVC

- (instancetype)init {
    return [self initWithNibName:NSStringFromClass([self class]) bundle:nil];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.tableView.tableFooterView = [[UIView alloc] init];
    [self.navigationController.view addSubview:self.loadindicatorView];

    self.title = LZD(@"L_AvailableGroups");
    [self showLoadingView];
    [BSScheduleParser allGroupsWithSuccess:^(NSArray *groups) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [self hideLoadingView];
            NSSortDescriptor *sort = [[NSSortDescriptor alloc] initWithKey:kGroupName ascending:YES];
            self.groups = [groups sortedArrayUsingDescriptors:@[sort]];
            [self.tableView reloadData];
        });
    } failure:^(NSError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            [self hideLoadingView];
            [BSUtils showAlertWithTitle:LZD(@"L_Error") message:error.localizedDescription inVC:self];
        });
    }];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}

//===============================================LOADING SCREEN===========================================
#pragma mark - Loading screen
- (void)showLoadingView {
    if (self.loadindicatorView.hidden) {
        self.loadindicatorView.hidden = NO;
        self.loadindicatorView.alpha = 0;
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.5;
        }];
    }
}

- (void)hideLoadingView {
    if (!self.loadindicatorView.hidden) {
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.0;
        } completion:^(BOOL finished) {
            if (finished) {
                self.loadindicatorView.hidden = YES;
            }
        }];
    }
}

- (UIView*)loadindicatorView {
    if (!_loadindicatorView) {
        _loadindicatorView = [[UIView alloc] initWithFrame:self.navigationController.view.bounds];
        _loadindicatorView.backgroundColor = [UIColor blackColor];
        UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
        activityIndicator.center = CGPointMake(_loadindicatorView.bounds.size.width / 2.0, _loadindicatorView.bounds.size.height / 2.0);
        [_loadindicatorView addSubview:activityIndicator];
        [activityIndicator startAnimating];
        _loadindicatorView.hidden = YES;
    }
    return _loadindicatorView;
}

//===============================================TABLE VIEW===========================================
#pragma mark - Table view

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self.groups count];
}

- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"cellID"];
    if (!cell) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"cellID"];
    }
    cell.textLabel.font = [UIFont fontWithName:@"OpenSans" size:17];
    NSDictionary *groupData = [self.groups objectAtIndex:indexPath.row];
    cell.textLabel.text = groupData[kGroupName];
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    NSDictionary *groupData = [self.groups objectAtIndex:indexPath.row];
    
    BSScheduleAddVC *scheduleAddVC = [[BSScheduleAddVC alloc] initWithGroupName:groupData[kGroupName] delehate:self];
    [self.navigationController pushViewController:scheduleAddVC animated:YES];
}

//===============================================DELEGATE===========================================
#pragma mark - Delegate

- (void)scheduleAddVC:(BSScheduleAddVC *)scheduleAddVC saveGroupWithGroupNumber:(NSString *)groupNumber subgroupNumber:(NSInteger)subgroupNumber {
    [self.delegate scheduleAddVC:scheduleAddVC saveGroupWithGroupNumber:groupNumber subgroupNumber:subgroupNumber];
    [self.navigationController popViewControllerAnimated:YES];
}

@end
//
//  BSScheduleAddVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 12.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSScheduleAddVC.h"
#import "BSConstants.h"
@interface BSScheduleAddVC ()
@property (weak, nonatomic) IBOutlet UITextField *groupNumberTF;
@property (weak, nonatomic) IBOutlet UITextField *subgroupTF;

@property (strong, nonatomic) NSString *groupName;
@end

@implementation BSScheduleAddVC

- (instancetype)initWithGroupName:(NSString*)groupName delehate:(id<BSScheduleAddVCDelegate>)delegate
{
    self = [super initWithNibName:NSStringFromClass([self class]) bundle:nil];
    if (self) {
        self.delegate = delegate;
        self.groupName = groupName;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = LZD(@"L_AddGroup");
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    self.navigationController.navigationBar.translucent = NO;
    
    UIBarButtonItem *addBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemSave
                                                                                      target:self
                                                                                      action:@selector(save)];
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        addBarButtonItem.tintColor = [UIColor whiteColor];
    } else {
        addBarButtonItem.tintColor = BS_BLUE;
    }
    self.navigationItem.rightBarButtonItem = addBarButtonItem;
    [self customizeSlideNavigationController:self.navigationController];
    
    if (self.groupName) {
        self.groupNumberTF.text = self.groupName;
        self.groupNumberTF.userInteractionEnabled = NO;
    }
}

- (void)customizeSlideNavigationController:(UINavigationController*)slideNavController {
    
    slideNavController.navigationBar.barStyle = UIBarStyleBlack;
    
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        [slideNavController.navigationBar setBarTintColor:BS_BLUE];
    } else {
        slideNavController.navigationBar.tintColor = BS_BLUE;
    }
    UIFont *titleFont = [UIFont fontWithName:@"OpenSans" size:20.0f];
    [slideNavController.navigationBar setTitleTextAttributes:@{NSForegroundColorAttributeName : [UIColor whiteColor],
                                                               NSFontAttributeName: titleFont}];
}

- (void)save {
    NSString *groupNumber = self.groupNumberTF.text;
    NSString* subgroup = self.subgroupTF.text;
    if (groupNumber && ![groupNumber isEqual:@""]) {
        if (subgroup && ![subgroup isEqual:@""]) {
            [self.delegate scheduleAddVC:self saveGroupWithGroupNumber:groupNumber subgroupNumber:[subgroup integerValue]];
            [self.navigationController popViewControllerAnimated:YES];
        } else {
            [self shakeView:self.subgroupTF amplitude:CGPointMake(10.0, 0)];
        }
    } else {
        [self shakeView:self.groupNumberTF amplitude:CGPointMake(10.0, 0)];
    }
}

- (void)shakeView:(UIView*)view amplitude:(CGPoint)amplitude {
    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"position"];
    [animation setDuration:0.07];
    [animation setRepeatCount:3];
    [animation setAutoreverses:YES];
    [animation setFromValue:[NSValue valueWithCGPoint:
                             CGPointMake([view center].x - amplitude.x, [view center].y - amplitude.y)]];
    [animation setToValue:[NSValue valueWithCGPoint:
                           CGPointMake([view center].x + amplitude.x, [view center].y + amplitude.y)]];
    [[view layer] addAnimation:animation forKey:@"position"];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
//
//  BSSettingsVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 20.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//toring

#import "BSSettingsVC.h"
#import "BSDataManager.h"
#import "BSConstants.h"
#import "UIView+Screenshot.h"
#import "NSUserDefaults+Share.h"

#import "BSScheduleAddVC.h"
#import "BSGroupSelectVC.h"
#import "AppDelegate.h"

#import "MGSwipeTableCell.h"
#import "MGSwipeButton.h"
#import "BSScheduleParser.h"

#import "BSUtils.h"

#import <Parse/Parse.h>

#import "UIViewController+Achivements.h"

@interface BSSettingsVC () <UITableViewDataSource,  UITableViewDelegate, MGSwipeTableCellDelegate, BSScheduleAddVCDelegate>
@property (strong, nonatomic) IBOutlet UITableView *tableView;

@property (strong, nonatomic) NSUserDefaults *sharedDefaults;
@property (strong, nonatomic) NSMutableArray *schedules;

@property (strong, nonatomic) UIView *loadindicatorView;

@property (nonatomic) BOOL updateCells;
@end

@implementation BSSettingsVC

static NSString * const kScheduleCellID = @"kScheduleCellID";

- (instancetype)init
{
    return [self initWithNibName:NSStringFromClass([self class]) bundle:nil];
}

- (UIView*)loadindicatorView {
    if (!_loadindicatorView) {
        _loadindicatorView = [[UIView alloc] initWithFrame:self.navigationController.view.bounds];
        _loadindicatorView.backgroundColor = [UIColor blackColor];
        UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
        activityIndicator.center = CGPointMake(_loadindicatorView.bounds.size.width / 2.0, _loadindicatorView.bounds.size.height / 2.0);
        [_loadindicatorView addSubview:activityIndicator];
        [activityIndicator startAnimating];
    }
    return _loadindicatorView;
}


#define BORDER_WIDTH 2.0
#define CORNER_RADIUS 5.0
- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.title = LZD(@"L_Groups");
    
    self.sharedDefaults = [NSUserDefaults sharedDefaults];
    UIBarButtonItem *addBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd
                                                                                      target:self
                                                                                      action:@selector(addGroup)];
    addBarButtonItem.style = UIBarButtonItemStylePlain;
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        addBarButtonItem.tintColor = [UIColor whiteColor];
    } else {
        addBarButtonItem.tintColor = BS_BLUE;
    }
    self.navigationItem.rightBarButtonItem = addBarButtonItem;
    [self.tableView registerClass:[MGSwipeTableCell class] forCellReuseIdentifier:kScheduleCellID];

    self.schedules = [[[BSDataManager sharedInstance] schelules] mutableCopy];
    
    self.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    [self.navigationController.view addSubview:self.loadindicatorView];
    self.loadindicatorView.hidden = YES;
}

- (void)addGroup {
    for (MGSwipeTableCell *cell in [self.tableView visibleCells]) {
        [cell hideSwipeAnimated:YES];
    }
    BSGroupSelectVC *groupSelectVC = [[BSGroupSelectVC alloc] init];
    groupSelectVC.delegate = self;
    [self.navigationController pushViewController:groupSelectVC animated:YES];
}

//===============================================MG SWYPE CELL===========================================
#pragma mark - MG Swype cell

- (void)swipeTableCell:(MGSwipeTableCell *)cell didChangeSwipeState:(MGSwipeState)state gestureIsActive:(BOOL)gestureIsActive {
    if (state == MGSwipeStateNone && self.updateCells) {
        [self.tableView reloadData];
        self.updateCells = NO;
    }
}

- (NSArray*)swipeTableCell:(MGSwipeTableCell *)cell swipeButtonsForDirection:(MGSwipeDirection)direction swipeSettings:(MGSwipeSettings *)swipeSettings expansionSettings:(MGSwipeExpansionSettings *)expansionSettings {
    NSMutableArray *btns = [NSMutableArray array];
    if (direction == MGSwipeDirectionRightToLeft) {
        __weak typeof(self) weakself = self;
        NSIndexPath *cellIndexPath = [self.tableView indexPathForCell:cell];
        BSSchedule *schedule = [self.schedules objectAtIndex:cellIndexPath.row];
        MGSwipeButton *deleteBtn = [MGSwipeButton buttonWithTitle:@"" icon:[UIImage imageNamed:@"trash"] backgroundColor:[UIColor redColor] padding:30.0 callback:^BOOL(MGSwipeTableCell *sender) {
            typeof(weakself) self = weakself;
            
            
            [self.schedules removeObject:schedule];
            [[BSDataManager sharedInstance] deleteSchedule:schedule];
            [self.tableView deleteRowsAtIndexPaths:@[cellIndexPath] withRowAnimation:UITableViewRowAnimationLeft];
            return YES;
        }];
        [btns addObject:deleteBtn];
        
        if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"8.0")) {
            UIImage *starImg;
            if ([schedule isEqual:[BSDataManager sharedInstance].currentWidgetSchedule]) {
                starImg = [UIImage imageNamed:@"star_filled"];
            } else {
                starImg = [UIImage imageNamed:@"star"];
            }
            MGSwipeButton *starBtn = [MGSwipeButton buttonWithTitle:@"" icon:starImg backgroundColor:BS_YELLOW callback:^BOOL(MGSwipeTableCell *sender) {
                typeof(weakself) self = weakself;
                [BSDataManager sharedInstance].currentWidgetSchedule = schedule;
                self.updateCells = YES;
                return YES;
            }];
            [btns addObject:starBtn];
        }

    }
    return btns;
}

//===============================================SCHEDULE ADD VC DELEGATe===========================================
#pragma mark - BSScheduleAddVC delegate

- (void)scheduleAddVC:(BSScheduleAddVC *)scheduleAddVC saveGroupWithGroupNumber:(NSString *)groupNumber subgroupNumber:(NSInteger)subgroupNumber {
    BSSchedule *schedule = [[BSDataManager sharedInstance] scheduleWithGroupNumber:groupNumber
                                                                     andSubgroup:subgroupNumber
                                                               createIfNotExists:YES];
    [self showLoadingView];
    __weak typeof(self) weakSelf = self;
    [BSScheduleParser scheduleForGroup:schedule.group
                           withSuccess:^{
                               typeof(weakSelf) self = weakSelf;
                               [self hideLoadingView];
                               if (![self.schedules containsObject:schedule]) {
                                   [self.schedules addObject:schedule];
                                   
                                   if ([BSDataManager sharedInstance].currentWidgetSchedule == nil) {
                                       [BSDataManager sharedInstance].currentWidgetSchedule = schedule;
                                   }
                                   
                                   NSIndexPath *indexPath = [NSIndexPath indexPathForRow:[self.schedules count]-1 inSection:0];
                                   [self.tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationTop];
                               }
                           } failure:^{
                               typeof(weakSelf) self = weakSelf;
                               [[BSDataManager sharedInstance] deleteSchedule:schedule];
                               [BSUtils showAlertWithTitle:LZD(@"L_Error") message:LZD(@"L_LoadError") inVC:self];
                               [self hideLoadingView];
                            }];
}

//===============================================LOADING SCREEN===========================================
#pragma mark - Loading screen
- (void)showLoadingView {
    if (self.loadindicatorView.hidden) {
        self.loadindicatorView.hidden = NO;
        self.loadindicatorView.alpha = 0;
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.5;
        }];
    }
}

- (void)hideLoadingView {
    if (!self.loadindicatorView.hidden) {
        [UIView animateWithDuration:ANIMATION_DURATION animations:^{
            self.loadindicatorView.alpha = 0.0;
        } completion:^(BOOL finished) {
            if (finished) {
                self.loadindicatorView.hidden = YES;
            }
        }];
    }
}

//===============================================TABLE VIEW===========================================
#pragma mark - Table view

- (NSInteger)numberOfSectionsInTableView:(UITableView *)table
{
    if ([self.schedules count] == 0) {
        UILabel *messageLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height)];
        
        messageLabel.textColor = BS_GRAY;
        messageLabel.numberOfLines = 0;
        messageLabel.textAlignment = NSTextAlignmentCenter;
        messageLabel.font = [UIFont systemFontOfSize:20];
        [messageLabel sizeToFit];
        
        messageLabel.text = LZD(@"L_NoGroups");

        self.tableView.backgroundView = messageLabel;
        self.tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    } else {
        self.tableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
        self.tableView.backgroundView = nil;
    }
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self.schedules count];
}


- (UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    MGSwipeTableCell *cell = [tableView dequeueReusableCellWithIdentifier:kScheduleCellID forIndexPath:indexPath];
    BSSchedule *schedule = [self.schedules objectAtIndex:indexPath.row];
    [cell.textLabel setText:[NSString stringWithFormat:@"%@/%ld",schedule.group.groupNumber,(long)[schedule.subgroup integerValue]]];
    
    cell.delegate = self;
    return cell;
}



@end
//
//  BSTutorialVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 10.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSTutorialVC.h"
#import "BSDataManager.h"
#import "BSPairCell.h"
#import "BSConstants.h"

#import "UIImage+ImageEffects.h"
@interface BSTutorialVC ()
@property (strong, nonatomic) IBOutlet UIView *lectureColorView;
@property (strong, nonatomic) IBOutlet UIView *laborColorView;
@property (strong, nonatomic) IBOutlet UIView *practiceColorView;

@property (strong, nonatomic) IBOutlet UIImageView *weeklyIcon;
@property (strong, nonatomic) IBOutlet UIImageView *dailyIcon;

@property (strong, nonatomic) IBOutlet UIImageView *lecturerIV;

@property (strong, nonatomic) IBOutlet UILabel *colorsLabel;
@property (strong, nonatomic) IBOutlet UILabel *iconsLabel;

@property (strong, nonatomic) IBOutlet UILabel *lectureLabel;
@property (strong, nonatomic) IBOutlet UILabel *labourLabel;
@property (strong, nonatomic) IBOutlet UILabel *practiceLabel;

@property (strong, nonatomic) IBOutlet UILabel *dayViewLabel;
@property (strong, nonatomic) IBOutlet UILabel *weekViewLabel;
@property (strong, nonatomic) IBOutlet UILabel *subgroupLabel;
@property (strong, nonatomic) IBOutlet UILabel *weekLabel;

@property (strong, nonatomic) IBOutlet UILabel *pairTimeLabel;
@property (strong, nonatomic) IBOutlet UILabel *subjectNameLabel;
@property (strong, nonatomic) IBOutlet UILabel *auditoryLabel;

@property (strong, nonatomic) IBOutlet UIView *pairIndicatorView;

@property (weak, nonatomic) IBOutlet UILabel *settingSwipeLabel;
@property (weak, nonatomic) IBOutlet UIView *starButton;
@property (weak, nonatomic) IBOutlet UILabel *starLabel;

@property (weak, nonatomic) IBOutlet UILabel *subgroupIndMeaningLabel;


@end

@implementation BSTutorialVC

- (instancetype)init {
    return [self initWithNibName:NSStringFromClass([BSTutorialVC class]) bundle:nil];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.lectureColorView.backgroundColor = [BSPair colorForPairType:BSPairTypeLecture];
    self.practiceColorView.backgroundColor = [BSPair colorForPairType:BSPairTypePractical];
    self.laborColorView.backgroundColor = [BSPair colorForPairType:BSPairTypeLaboratory];
    
    self.title = LZD(@"L_Info");
    
    [self.weeklyIcon setImage:[[UIImage imageNamed:@"weekly"] imageWithOverlayColor:BS_DARK]];
    [self.dailyIcon setImage:[[UIImage imageNamed:@"daily_1"] imageWithOverlayColor:BS_DARK]];

    self.lecturerIV.layer.masksToBounds = YES;
    self.lecturerIV.layer.cornerRadius = self.lecturerIV.frame.size.width/2.0;
    
    self.colorsLabel.text = LZD(@"L_Colors");
    self.iconsLabel.text = LZD(@"L_Icons");
    
    self.lectureLabel.text = LZD(@"L_Lecture");
    self.practiceLabel.text = LZD(@"L_Practice");
    self.labourLabel.text = LZD(@"L_Labour");
    
    self.dayViewLabel.text = LZD(@"L_DayView");
    self.weekViewLabel.text = LZD(@"L_WeekView");
    self.subgroupLabel.text = LZD(@"L_Subgroup");
    self.weekLabel.text = LZD(@"L_Week");
    
    self.subjectNameLabel.text = LZD(@"L_SubjectName");
    self.auditoryLabel.text = [NSString stringWithFormat:@"%@-%@",LZD(@"L_Room"),LZD(@"L_Housing")];
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"HH:mm"];
    NSString *timeString = [NSString stringWithFormat:@"%@\n-\n%@", LZD(@"L_StartTime"),LZD(@"L_EndTime")];
    [self setTimeText:timeString];
    
    self.pairIndicatorView.backgroundColor = [BSPair colorForPairType:BSPairTypeLecture];
    
    self.starButton.hidden = SYSTEM_VERSION_LESS_THAN(@"8.0");
    self.starButton.backgroundColor = BS_YELLOW;
    
    self.settingSwipeLabel.textColor = BS_DARK;
    [self.settingSwipeLabel setText:LZD(@"L_SettingsSwipe")];
    
    [self.starLabel setText:LZD(@"L_StarMeaning")];

    [self.subgroupIndMeaningLabel setText:[NSString stringWithFormat:@"%@\n☟",LZD(@"L_SubgroupMeaning")]];

    self.navigationController.navigationBar.translucent = NO;
}


#define LINE_HEIGHT 16.0
#define FONT_SIZE_24_h 16.0
#define FONT_SIZE_12_h 14.0

- (void)setTimeText:(NSString *)timeText {
    if (!SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"7.0")) {
        [self.pairTimeLabel setAdjustsFontSizeToFitWidth:NO];
    }
    NSMutableAttributedString* attrTimeString = [[NSMutableAttributedString alloc] initWithString:timeText];
    NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
    [style setMaximumLineHeight:LINE_HEIGHT];
    [style setAlignment:NSTextAlignmentCenter];
    [attrTimeString addAttribute:NSParagraphStyleAttributeName
                           value:style
                           range:NSMakeRange(0, [timeText length])];
    
    [attrTimeString addAttribute:NSFontAttributeName
                           value:[UIFont fontWithName:@"OpenSans-Light" size:[self is24format] ? FONT_SIZE_24_h : FONT_SIZE_12_h]
                           range:NSMakeRange(0, [timeText length])];
    self.pairTimeLabel.attributedText = attrTimeString;
}

- (BOOL)is24format {
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setLocale:[NSLocale currentLocale]];
    [formatter setDateStyle:NSDateFormatterNoStyle];
    [formatter setTimeStyle:NSDateFormatterShortStyle];
    NSString *dateString = [formatter stringFromDate:[NSDate date]];
    NSRange amRange = [dateString rangeOfString:[formatter AMSymbol]];
    NSRange pmRange = [dateString rangeOfString:[formatter PMSymbol]];
    BOOL is24h = (amRange.location == NSNotFound && pmRange.location == NSNotFound);
    return is24h;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - SlideNavigationController Methods -

- (BOOL)slideNavigationControllerShouldDisplayLeftMenu
{
    return YES;
}

@end
//
//  BSLabelWithImage.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 09.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSLabelWithImage.h"

@interface BSLabelWithImage()
@property (nonatomic) BSImageAligment aligment;
@end
@implementation BSLabelWithImage

- (void)addImage:(UIImage *)image withAligment:(BSImageAligment)aligment {
    [self.imageView removeFromSuperview];
    self.imageView = [[UIImageView alloc] initWithImage:image];
    self.aligment = aligment;
    if (aligment == BSImageAligmentLeft) {
        self.text = [@"     " stringByAppendingString:self.text];
    } else if (aligment == BSImageAligmentRight) {
        self.text = [self.text stringByAppendingString:@"     "];
    }
    [self addSubview:self.imageView];
}

- (void)layoutSubviews {
    [super layoutSubviews];
    self.imageView.center = CGPointMake(self.imageView.center.x, self.frame.size.height / 2.0);
    if (self.aligment == BSImageAligmentRight) {
        CGRect ivFrame = self.imageView.frame;
        ivFrame.origin.x = self.bounds.size.width - ivFrame.size.width;
        self.imageView.frame = ivFrame;
    }
}

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

@end
//
//  BSTextField.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 20.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSTextField.h"

@implementation BSTextField

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

- (CGRect)textRectForBounds:(CGRect)bounds {
    return [self editingRectForBounds:bounds];
}
#define INSET 10.0
- (CGRect)editingRectForBounds:(CGRect)bounds {
    return CGRectInset( bounds, INSET, 0);
}

@end
//
//  BSTriangleView.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 21.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSTriangleView.h"

@implementation BSTriangleView

-(void)drawRect:(CGRect)rect
{
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    
    CGContextBeginPath(ctx);
    CGContextMoveToPoint   (ctx, CGRectGetMinX(rect), CGRectGetMinY(rect));  // top left
    CGContextAddLineToPoint(ctx, CGRectGetMaxX(rect), CGRectGetMidY(rect));  // mid right
    CGContextAddLineToPoint(ctx, CGRectGetMinX(rect), CGRectGetMaxY(rect));  // bottom left
    CGContextClosePath(ctx);
    if (self.fillColor) {
        const CGFloat *components = CGColorGetComponents(self.fillColor.CGColor);
        CGContextSetRGBFillColor(ctx, components[0], components[1], components[2], components[3]);
    }
    CGContextFillPath(ctx);
}

@end
//
//  BSUtils.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 12.02.15.
//  Copyright (c) 2015 Saute. All rights reserved.
//

#import "BSUtils.h"

@implementation BSUtils

+ (void)showAlertWithTitle:(NSString*)title message:(NSString*)message inVC:(UIViewController*)vc {
    
    NSString *okButtonTitle = NSLocalizedString(@"L_Ok", nil);
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"8.0")) {
        UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:title
                                                                         message:message
                                                                  preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *okAction = [UIAlertAction actionWithTitle:okButtonTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
            [alertVC dismissViewControllerAnimated:YES completion:nil];
        }];
        [alertVC addAction:okAction];
        [vc presentViewController:alertVC animated:YES completion:nil];
    } else {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title
                                                        message:message
                                                       delegate:nil
                                              cancelButtonTitle:okButtonTitle otherButtonTitles: nil];
        [alert show];
    }
}

+ (NSDate*)midnight {
    NSDate *date = [NSDate date];
    NSCalendar *calendar = [NSCalendar autoupdatingCurrentCalendar];
    NSUInteger preservedComponents = (NSYearCalendarUnit | NSMonthCalendarUnit | NSDayCalendarUnit);
    date = [calendar dateFromComponents:[calendar components:preservedComponents fromDate:date]];
    return date;
}
@end
//
//  Bsuir_ScheduleTests.m
//  Bsuir ScheduleTests
//
//  Created by Anton Siliuk on 16.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import <UIKit/UIKit.h>
#import <XCTest/XCTest.h>

@interface Bsuir_ScheduleTests : XCTestCase

@end

@implementation Bsuir_ScheduleTests

- (void)setUp {
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testExample {
    // This is an example of a functional test case.
    XCTAssert(YES, @"Pass");
}

- (void)testPerformanceExample {
    // This is an example of a performance test case.
    [self measureBlock:^{
        // Put the code you want to measure the time of here.
    }];
}

@end
