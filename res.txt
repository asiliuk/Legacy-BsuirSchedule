//
//  BSAuditory.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSAuditory.h"
#import "BSPair.h"


@implementation BSAuditory

@dynamic address;
@dynamic subjectsSchedule;

@end
//
//  DataManager.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 16.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSDataManager.h"
#import "AppDelegate.h"
#import "XMLDictionary.h"
#import "BSConstants.h"
#import "NSDate+Compare.h"

@interface BSDataManager()
@property (strong, nonatomic) NSArray *weekDays;
@end
@implementation BSDataManager

+ (instancetype)sharedInstance {
    
    static id sharedObject = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        sharedObject = [[super allocWithZone:NULL] init];
    });
    return sharedObject;
}

+ (id)allocWithZone:(struct _NSZone *)zone {
    
    return [[self class] sharedInstance];
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.weekDays = @[@"Воскресенье", @"Понедельник", @"Вторник", @"Среда", @"Четверг", @"Пятница", @"Суббота"];
    }
    return self;
}

#define MAX_INTERVAL_TO_HIGHLIGHT 10
- (BSDayWithWeekNum*)dayToHighlight {
    BSDayWithWeekNum *dayToHighlight;
    NSDate *now = [NSDate date];
    for (NSInteger dayIndex = 0; dayIndex < MAX_INTERVAL_TO_HIGHLIGHT; dayIndex++) {
        NSDate *dayDate = [now dateByAddingTimeInterval:DAY_IN_SECONDS*dayIndex];
        BSDayWithWeekNum *dayWithWeekNum = [[BSDayWithWeekNum alloc] initWithDate:dayDate];
        if (dayWithWeekNum && [dayWithWeekNum.pairs count] > 0) {
            BOOL today = [now isEqual:dayDate];
            NSDate *todayLastPairEnd = [[[dayWithWeekNum pairs] lastObject] endTime]; //need pairs of 'today' to highlight tomorrow section header
            BOOL todayPairsEnded = [todayLastPairEnd compareTime:now] == NSOrderedAscending || [dayWithWeekNum.pairs count] == 0;
            if (!(today && (todayPairsEnded || dayWithWeekNum.dayOfWeek == nil))) {
                    dayToHighlight = dayWithWeekNum;
                    break;
                
            }
        }
    }
    return dayToHighlight;
}

//===============================================SUBJECT===========================================
#pragma mark - Subject

- (NSArray*)subjects {
    NSFetchRequest *subjectsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSSubject class])];
    return [self.managedObjectContext executeFetchRequest:subjectsRequest error:nil];
}

- (BSSubject*)subjectWithName:(NSString *)name createIfNotExists:(BOOL)createIfNotExists{
    BSSubject *subject;
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSSubject class])];
    NSPredicate *namePredicate = [NSPredicate predicateWithFormat:@"name == %@", name];
    request.predicate = namePredicate;
    NSError *error;
    NSArray *results = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in subject fetch: %@", error.localizedDescription);
    }else if ([results count] > 0) {
        subject = [results lastObject];
    } else if (createIfNotExists) {
        subject = [self addSubjectWithName:name];
    }
    return subject;
}

- (BSSubject*)addSubjectWithName:(NSString *)name {
    BSSubject *subject = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSSubject class]) inManagedObjectContext:self.managedObjectContext];
    subject.name = name;
    return subject;
}

//===============================================LECTURER===========================================
#pragma mark - Lecturer

- (NSArray*)lectures {
    NSFetchRequest *lecturesRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSLecturer class])];
    return [self.managedObjectContext executeFetchRequest:lecturesRequest error:nil];
}

- (BSLecturer*)lecturerWithID:(NSInteger)lecturerID {
    NSPredicate *idPredicate = [NSPredicate predicateWithFormat:@"lecturerID == %@", @(lecturerID)];
    return [self lecturerWithPredicate:idPredicate];
}

- (BSLecturer*)lecturerWithFirstName:(NSString *)firstName
                         midleName:(NSString *)middleName
                          lastName:(NSString *)lastName{
    NSPredicate *lecturerPredicate = [NSPredicate predicateWithFormat:@"firstName == %@ AND middleName == %@ AND lastName == %@", firstName, middleName, lastName];
    return [self lecturerWithPredicate:lecturerPredicate];
}

- (BSLecturer*)lecturerWithPredicate:(NSPredicate*)predicate {
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSLecturer class])];
    request.predicate = predicate;
    BSLecturer *lecturer;
    NSError *error;
    NSArray *lecturers = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in lectures fetch: %@", error.localizedDescription);
    } else if ([lecturers count] > 0) {
        lecturer = [lecturers lastObject];
    }
    return lecturer;
}


- (BSLecturer*)addLecturerWithFirstName:(NSString *)firstName
                            midleName:(NSString *)middleName
                             lastName:(NSString *)lastName
                           department:(NSString *)department
                           lecturerID:(NSInteger)lecturerID
{
    BSLecturer *lecturer = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSLecturer class]) inManagedObjectContext:self.managedObjectContext];
    lecturer.firstName = firstName;
    lecturer.middleName = middleName;
    lecturer.lastName = lastName;
    lecturer.lecturerID = @(lecturerID);
    lecturer.academicDepartment = department;
    return lecturer;
}

//===============================================DAY===========================================
#pragma mark - Day

- (NSArray*)days {
    NSFetchRequest *daysRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSDayOfWeek class])];
    [daysRequest setReturnsObjectsAsFaults:NO];
    [daysRequest setRelationshipKeyPathsForPrefetching:[NSArray arrayWithObjects:@"pairs", nil]];
    return [self.managedObjectContext executeFetchRequest:daysRequest error:nil];
}

- (BSDayOfWeek*)dayWithIndex:(NSInteger)dayIndex createIfNotExists:(BOOL)createIfNotExists {
    return [self dayWithName:[self.weekDays objectAtIndex:dayIndex] createIfNotExists:createIfNotExists];
}

- (BSDayOfWeek*)dayWithDate:(NSDate*)date {
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSCalendarUnit calendarUnits = NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear | NSCalendarUnitWeekday;
    NSDateComponents *dateComponents = [gregorian components:calendarUnits fromDate:date];
    return [self dayWithIndex:([dateComponents weekday]-1) createIfNotExists:NO];
}

- (BSDayOfWeek*)dayWithName:(NSString *)dayName createIfNotExists:(BOOL)createIfNotExists{
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSDayOfWeek class])];
    request.predicate = [NSPredicate predicateWithFormat:@"name == %@", dayName];
    BSDayOfWeek *day;
    NSError *error;
    NSArray *days = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in days fetch: %@", error.localizedDescription);
    } else if ([days count] > 0) {
        day = [days lastObject];
    } else if (createIfNotExists) {
        day = [self addDayWithName:dayName];
    }
    return day;
}

- (BSDayOfWeek*)addDayWithName:(NSString *)dayName {
    BSDayOfWeek *day = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSDayOfWeek class]) inManagedObjectContext:self.managedObjectContext];
    day.name = dayName;
    return day;
}

- (NSInteger)indexForDayName:(NSString *)dayName {
    return [self.weekDays indexOfObject:dayName];
}

//===============================================AUDITORY===========================================
#pragma mark - Auditory

- (NSArray*)auditories {
    NSFetchRequest *auditoriesRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSAuditory class])];
    return [self.managedObjectContext executeFetchRequest:auditoriesRequest error:nil];
}

- (BSAuditory*)auditoryWithAddress:(NSString *)address createIfNotExists:(BOOL)createIfNotExists {
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSAuditory class])];
    request.predicate = [NSPredicate predicateWithFormat:@"address == %@", address];
    BSAuditory *auditory;
    NSError *error;
    NSArray *auditories = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in auditory fetch: %@", error.localizedDescription);
    } else if ([auditories count] > 0) {
        auditory = [auditories lastObject];
    } else if (createIfNotExists) {
        auditory = [self addAuditoryWithAddress:address];
    }
    return auditory;
}

- (BSAuditory*)addAuditoryWithAddress:(NSString *)address {
    BSAuditory *auditory = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSAuditory class]) inManagedObjectContext:self.managedObjectContext];
    auditory.address = address;
    return auditory;
}

//===============================================PAIR===========================================
#pragma mark - Pair

- (NSArray*)pairs {
    NSFetchRequest *pairsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSPair class])];
    return [self.managedObjectContext executeFetchRequest:pairsRequest error:nil];
}

- (BSPair*)addPairWithStartTime:(NSDate *)startTime
                        endTime:(NSDate *)endTime
                 subgroupNumber:(NSInteger)subgroupNumber
                   pairTypeName:(NSString*)pairTypeName
                     inAuditory:(BSAuditory *)auditory
                          atDay:(BSDayOfWeek *)day
                        subject:(BSSubject *)subject
                       lecturer:(BSLecturer *)lecturer
                          weeks:(NSSet *)weeks
{
    BSPair *pair;
    PairType pairType = [BSPair pairTypeWithName:pairTypeName];
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSPair class])];
    NSPredicate *pairPredicate = [NSPredicate predicateWithFormat:@"startTime == %@ AND endTime == %@ \
                                      AND subgroupNumber == %@ AND pairType == %d \
                                      AND auditory == %@ AND day == %@ \
                                      AND subject == %@ AND lecturer == %@",
                                      startTime, endTime,
                                      @(subgroupNumber), pairType,
                                      auditory, day,
                                      subject, lecturer];
    request.predicate = pairPredicate;

    NSError *error;
    NSArray *pairs = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in pairs fetch: %@", error.localizedDescription);
    } else if (pairs && [pairs count] > 0) {
        pair = [pairs lastObject];
    } else {
        pair = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSPair class]) inManagedObjectContext:self.managedObjectContext];
        pair.startTime = startTime;
        pair.endTime = endTime;
        pair.subgroupNumber = @(subgroupNumber);
        pair.pairType = @(pairType);
        pair.auditory = auditory;
        pair.day = day;
        pair.subject = subject;
        pair.lecturer = lecturer;
        [pair addWeeks:weeks];
    }
    [self saveContext];
    return pair;
}

//===============================================WEEKNUMBERS===========================================
#pragma mark - Week Numbers

- (NSArray*)weekNumbers {
    NSFetchRequest *weekNumbersRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSWeekNumber class])];
    NSError *error;
    NSArray *weekNumbers = [self.managedObjectContext executeFetchRequest:weekNumbersRequest error:&error];
    if (error) {
        NSLog(@"Error in fetch week numbers %@", error.localizedDescription);
    }
    return weekNumbers;
}

- (BSWeekNumber*)weekNumberWithNumber:(NSInteger)weekNumber createIfNotExists:(BOOL)createIfNotExists {
    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSWeekNumber class])];
    request.predicate = [NSPredicate predicateWithFormat:@"weekNumber == %@", @(weekNumber)];
    BSWeekNumber *weekNumberObj;
    NSError *error;
    NSArray *weekNumbers = [self.managedObjectContext executeFetchRequest:request error:&error];
    if (error) {
        NSLog(@"Error in auditory fetch: %@", error.localizedDescription);
    } else if ([weekNumbers count] > 0) {
        weekNumberObj = [weekNumbers lastObject];
    } else if (createIfNotExists) {
        weekNumberObj = [self addWeekNumberWithNumber:weekNumber];
    }
    return weekNumberObj;
}

- (BSWeekNumber*)addWeekNumberWithNumber:(NSInteger)weekNumber {
    BSWeekNumber *weekNumberObj = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([BSWeekNumber class]) inManagedObjectContext:self.managedObjectContext];
    weekNumberObj.weekNumber = @(weekNumber);
    return weekNumberObj;
}

- (BSWeekNumber*)currentWeek {
    return [self weekNumberWithDate:[NSDate date]];
}

#define START_DAY 1
#define START_MONTH 9

#define END_DAY 1
#define END_MONTH 7


- (BSWeekNumber*)weekNumberWithDate:(NSDate *)date {
    NSCalendar *gregorian = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSCalendarUnit calendarUnits = NSCalendarUnitDay | NSCalendarUnitMonth | NSCalendarUnitYear | NSCalendarUnitWeekday;
    NSDateComponents *dateComponents = [gregorian components:calendarUnits fromDate:date];
    dateComponents.day -= [dateComponents weekday];
    
    NSDateComponents *lastDay = [gregorian components:calendarUnits  fromDate:[NSDate date]];
    lastDay.day =  END_DAY;
    lastDay.month = END_MONTH;
    NSDate *lastDayDate = [gregorian dateFromComponents:lastDay];
    
    NSDateComponents *firstDay = [gregorian components:calendarUnits  fromDate:[NSDate date]];
    firstDay.day =  START_DAY;
    firstDay.month = START_MONTH;
    NSDate *firstDayDate = [gregorian dateFromComponents:firstDay];
    firstDay = [gregorian components:calendarUnits fromDate:firstDayDate]; // to reload weekDay unit
    firstDay.day -= [firstDay weekday];
    
    NSTimeInterval timePased = [[gregorian dateFromComponents:dateComponents] timeIntervalSinceDate:[gregorian dateFromComponents:firstDay]];
    if (timePased < 0 && [[NSDate date] compare:lastDayDate] == NSOrderedAscending) {
        firstDay.year -= 1;
    }
    timePased = fabs([[gregorian dateFromComponents:dateComponents] timeIntervalSinceDate:[gregorian dateFromComponents:firstDay]]);
    NSInteger weeksPast = timePased / (7*24*3600);
    NSInteger weekNum = (weeksPast % 4) + 1;
    return [self weekNumberWithNumber:weekNum createIfNotExists:YES];
}
//===============================================CORE DATA STACK===========================================
#pragma mark - Core Data stack

@synthesize managedObjectContext = _managedObjectContext;
@synthesize managedObjectModel = _managedObjectModel;
@synthesize persistentStoreCoordinator = _persistentStoreCoordinator;

- (NSURL *)storeURLBase {
    // The directory the application uses to store the Core Data store file. This code uses a directory named "com.saute.Bsuir_Schedule" in the application's documents directory.
    return [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:kAppGroup];
}

- (NSManagedObjectModel *)managedObjectModel {
    // The managed object model for the application. It is a fatal error for the application not to be able to find and load its model.
    if (_managedObjectModel != nil) {
        return _managedObjectModel;
    }
    
    NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"ScheduleData" withExtension:@"momd"];
    _managedObjectModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    return _managedObjectModel;
}

- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {
    // The persistent store coordinator for the application. This implementation creates and return a coordinator, having added the store for the application to it.
    if (_persistentStoreCoordinator != nil) {
        return _persistentStoreCoordinator;
    }
    
    // Create the coordinator and store
    
    _persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:[self managedObjectModel]];
    NSURL *storeURL = [self storeURLBase];
    storeURL = [storeURL URLByAppendingPathComponent:@"ScheduleData.sqlite"];
    
    NSError *error = nil;
    NSString *failureReason = @"There was an error creating or loading the application's saved data.";
    NSDictionary *pragmaOptions = [NSDictionary dictionaryWithObject:@"MEMORY" forKey:@"journal_mode"];
    
    NSDictionary *options = [NSDictionary dictionaryWithObjectsAndKeys:
                             [NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption,
                             [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption,
                             pragmaOptions, NSSQLitePragmasOption, nil];
    if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeURL options:options error:&error]) {
        // Report any error we got.
        NSMutableDictionary *dict = [NSMutableDictionary dictionary];
        dict[NSLocalizedDescriptionKey] = @"Failed to initialize the application's saved data";
        dict[NSLocalizedFailureReasonErrorKey] = failureReason;
        dict[NSUnderlyingErrorKey] = error;
        error = [NSError errorWithDomain:@"YOUR_ERROR_DOMAIN" code:9999 userInfo:dict];
        // Replace this with code to handle the error appropriately.
        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
        NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
        abort();
    }
    
    return _persistentStoreCoordinator;
}


- (NSManagedObjectContext *)managedObjectContext {
    // Returns the managed object context for the application (which is already bound to the persistent store coordinator for the application.)
    if (_managedObjectContext != nil) {
        return _managedObjectContext;
    }
    
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (!coordinator) {
        return nil;
    }
    _managedObjectContext = [[NSManagedObjectContext alloc] init];
    [_managedObjectContext setPersistentStoreCoordinator:coordinator];
    return _managedObjectContext;
}

#pragma mark - Core Data Saving support

- (void)saveContext {
    NSManagedObjectContext *managedObjectContext = self.managedObjectContext;
    if (managedObjectContext != nil) {
        NSError *error = nil;
        if ([managedObjectContext hasChanges] && ![managedObjectContext save:&error]) {
            // Replace this implementation with code to handle the error appropriately.
            // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            NSLog(@"Unresolved error %@, %@", error, [error userInfo]);
            abort();
        }
    }
}

- (void)resetDatabase {
//    NSArray *persistentStores = [self.persistentStoreCoordinator persistentStores];
//    for (NSPersistentStore *store in persistentStores) {
//        NSError *error;
//        NSURL *storeURL = store.URL;
//        [_persistentStoreCoordinator removePersistentStore:store error:&error];
//        [[NSFileManager defaultManager] removeItemAtPath:storeURL.path error:&error];
//        if (error) {
//            NSLog(@"Error: %@",error.localizedDescription);
//        }
//    }
//    _persistentStoreCoordinator = nil;
//    _managedObjectModel = nil;
//    _managedObjectContext = nil;
    NSFetchRequest *pairsRequest = [NSFetchRequest fetchRequestWithEntityName:NSStringFromClass([BSPair class])];
    NSError *error;
    NSArray *items = [_managedObjectContext executeFetchRequest:pairsRequest error:&error];
    
    for (NSManagedObject *managedObject in items) {
        [_managedObjectContext deleteObject:managedObject];
    }
    if (![_managedObjectContext save:&error]) {
        NSLog(@"Error deleting pair - error:%@",error);
    }
}

@end
//
//  BSDayOfWeek.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSDayOfWeek.h"
#import "BSPair.h"


@implementation BSDayOfWeek

@dynamic name;
@dynamic pairs;

@end
//
//  BSDayWithWeekNum.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 21.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSDayWithWeekNum.h"
#import "BSDataManager.h"
#import "NSDate+Compare.h"
#import "BSConstants.h"
#import "NSUserDefaults+Share.h"

@implementation BSDayWithWeekNum

- (instancetype)initWithDate:(NSDate *)date {
    self = [super init];
    if (self) {
        self.date = date;
        self.weekNumber = [[BSDataManager sharedInstance] weekNumberWithDate:date];
        self.dayOfWeek = [[BSDataManager sharedInstance] dayWithDate:date];
    }
    return self;
}
- (NSArray*)pairs {
    if (!_pairs) {
        NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
        NSNumber *subgroupNumber = @([[sharedDefaults objectForKey:kUserSubgroup] integerValue]);
        NSSortDescriptor *sortD = [NSSortDescriptor sortDescriptorWithKey:@"startTime" ascending:YES];
        NSArray *pairs = [self.dayOfWeek.pairs sortedArrayUsingDescriptors:@[sortD]];
        NSMutableArray *weekPairs = [NSMutableArray array];
        for (BSPair *pair in pairs) {
            if ([pair.weeks containsObject:self.weekNumber] && ([pair.subgroupNumber isEqual:@(0)] || [pair.subgroupNumber isEqual:subgroupNumber])) {
                [weekPairs addObject:pair];
            }
        }
        _pairs = weekPairs;
    }
    return _pairs;
}

- (BOOL)isEqual:(BSDayWithWeekNum *)object {
    BOOL equal = NO;
    BOOL equalWeekDay = [self.dayOfWeek isEqual:object.dayOfWeek] || (self.dayOfWeek == nil && object.dayOfWeek == nil);
    BOOL equalWeekNum = [self.weekNumber isEqual:object.weekNumber] || (self.weekNumber == nil && object.weekNumber == nil);
    BOOL equalDate = [self.date isEqualToDateWithoutTime:object.date];
    equal = equalWeekDay && equalWeekNum && equalDate;
    return equal;
}
@end
//
//  BSLecturer+Thumbnail.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 18.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSLecturer+Thumbnail.h"
#import "NSString+Transiterate.h"

static NSString * const kNoavatar = @"noavatar";

@implementation BSLecturer (Thumbnail)
- (UIImage*)thumbnail {
    NSString *thumbName = [NSString stringWithFormat:@"%@_%@_%@.jpg", self.lastName, self.firstName, self.middleName];
    UIImage *thumbnail = [UIImage imageNamed:[thumbName toLatinWithDictionary]];
    if (!thumbnail) {
        thumbnail = [UIImage imageNamed:kNoavatar];
    }
    return thumbnail;
}
@end
//
//  BSLecturer.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSLecturer.h"
#import "BSPair.h"


@implementation BSLecturer

@dynamic academicDepartment;
@dynamic firstName;
@dynamic lastName;
@dynamic lecturerID;
@dynamic middleName;
@dynamic pairs;

@end
//
//  BSPair+Color.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 19.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPair+Color.h"
#import "BSConstants.h"

@implementation BSPair (Color)
- (UIColor*)colorForPairType {
    UIColor *pairTypeColor;
    switch ([self.pairType integerValue]) {
        case BSPairTypeLaboratory:
            pairTypeColor = BS_YELLOW;
            break;
        case BSPairTypeLecture:
            pairTypeColor = BS_GREEN;
            break;
        case BSPairTypePractical:
            pairTypeColor = BS_RED;
            break;
        default:
            pairTypeColor = BS_BLUE;
            break;
    }
    return pairTypeColor;
}
@end
//
//  BSPair+Type.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 19.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPair+Type.h"

@implementation BSPair (Type)
- (NSString*)pairTypeName {
    NSString *pairTypeName;
    PairType pairType = (PairType)[self.pairType integerValue];
    switch (pairType) {
        case BSPairTypeLaboratory:
            pairTypeName = @"ЛР";
            break;
        case BSPairTypeLecture:
            pairTypeName = @"ЛК";
            break;
        case BSPairTypePractical:
            pairTypeName = @"ПЗ";
            break;
        default:
            pairTypeName = @"Неизвестно";
            break;
    }
    return pairTypeName;
}

+ (PairType)pairTypeWithName:(NSString *)pairTypeName
{
    PairType pairType = BSPairTypeUnknown;
    if ([pairTypeName isEqualToString:@"ЛК"]) {
        pairType = BSPairTypeLecture;
    } else if ([pairTypeName isEqualToString:@"ПЗ"]) {
        pairType = BSPairTypePractical;
    } else if ([pairTypeName isEqualToString:@"ЛР"]) {
        pairType = BSPairTypeLaboratory;
    }
    return pairType;
}

- (void)setPairTypeWithName:(NSString *)pairTypeName {
    self.pairType = @([BSPair pairTypeWithName:pairTypeName]);
}
@end
//
//  BSPair.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 19.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPair.h"
#import "BSAuditory.h"
#import "BSDayOfWeek.h"
#import "BSLecturer.h"
#import "BSSubject.h"
#import "BSWeekNumber.h"


@implementation BSPair

@dynamic endTime;
@dynamic startTime;
@dynamic subgroupNumber;
@dynamic pairType;
@dynamic auditory;
@dynamic day;
@dynamic lecturer;
@dynamic subject;
@dynamic weeks;

@end
//
//  BSScheduleParser.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 27.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSScheduleParser.h"
#import "BSConstants.h"
#import "AppDelegate.h"
#import "XMLDictionary.h"
#import "BSDataManager.h"
#import "NSUserDefaults+Share.h"
@implementation BSScheduleParser


//===============================================SCHEDULE PARSING===========================================
#pragma mark - Schedule parsing
#define UPDATE_INTERVAL 7*24*3600

+ (BOOL)scheduleNeedUpdateForGroup:(NSString *)groupNumber {
    NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
    NSDate *lastUpdate = [sharedDefaults objectForKey:kLastUpdate];
    NSString *currentScheduleGroup = [sharedDefaults objectForKey:kCurrentScheduleGroup];
    NSInteger timeInterval = [[NSDate date] timeIntervalSinceDate:lastUpdate];
    return  !(lastUpdate && timeInterval <= UPDATE_INTERVAL && [currentScheduleGroup isEqual:groupNumber]);
}

+ (void)scheduleForGroupNumber:(NSString *)groupNumber withSuccess:(void (^)(void))success failure:(void (^)(void))failure {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        NSData *data;
        NSURL *url = [NSURL URLWithString:[BASE_URL stringByAppendingString:groupNumber]];
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
        data = [NSData dataWithContentsOfURL:url];
        [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
        NSDictionary *dict = [NSDictionary dictionaryWithXMLData:data];
        if (dict) {
            dispatch_sync(dispatch_get_main_queue(), ^{
                [[BSDataManager sharedInstance] resetDatabase];
            });
            NSArray *scheduleData = dict[kScheduleModel];
            for (NSDictionary *dayData in scheduleData) {
                NSString *dayName = dayData[kDayName];
                BSDayOfWeek *day = [[BSDataManager sharedInstance] dayWithName:dayName createIfNotExists:YES];
                id subjects = dayData[kDaySchedule];
                if (![subjects isKindOfClass:[NSArray class]]) {
                    subjects = @[subjects];
                }
                for (NSDictionary *subjectData in subjects) {
                    NSString *subjectName = subjectData[kSubjectName];
                    NSString *pairType = subjectData[kSubjectType];
                    NSString *subgroupNumberString = subjectData[kSubjectNumSubgroup];
                    NSInteger subgroupNumber = 0;
                    if (subgroupNumberString && ![subgroupNumberString isEqualToString:@""]) {
                        subgroupNumber = [subgroupNumberString integerValue];
                    }
                    NSString *subjectAuditoryAddress = subjectData[kSubjectAuditory];
                    BSAuditory *auditory = [[BSDataManager sharedInstance] auditoryWithAddress:subjectAuditoryAddress createIfNotExists:YES];
                    BSSubject *subject = [[BSDataManager sharedInstance] subjectWithName:subjectName createIfNotExists:YES];
                    NSDictionary *lecturerData = subjectData[kLecturer];
                    BSLecturer *lecturer;
                    if (lecturerData) {
                        lecturer = [[BSDataManager sharedInstance] lecturerWithID:[lecturerData[kLecturerID] integerValue]];
                        if (!lecturer) {
                            lecturer = [[BSDataManager sharedInstance] addLecturerWithFirstName:lecturerData[kLecturerFirstName]
                                                                                      midleName:lecturerData[kLecturerMiddleName]
                                                                                       lastName:lecturerData[kLecturerLastName]
                                                                                     department:@""//lecturerData[kLecturerDepartment]
                                                                                     lecturerID:[lecturerData[kLecturerID] integerValue]];
                            
                        }
                    }
                    NSString *startEndTime = subjectData[kSubjectTime];
                    startEndTime = [startEndTime stringByReplacingOccurrencesOfString:@" " withString:@""];
                    NSArray *pairTime = [startEndTime componentsSeparatedByString:@"-"];
                    NSString *startTime = [pairTime firstObject];
                    NSString *endTime = [pairTime lastObject];
                    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
                    [formatter setDateFormat:@"HH:mm"];
                    NSMutableSet *weekNumbers = [NSMutableSet set];
                    id weekNumbersData = subjectData[kSubjectWeeks];
                    if ([weekNumbersData isKindOfClass:[NSString class]]) {
                        weekNumbersData = @[weekNumbersData];
                    }
                    for (NSString *weekNumberData in weekNumbersData) {
                        [weekNumbers addObject:[[BSDataManager sharedInstance] weekNumberWithNumber:[weekNumberData integerValue] createIfNotExists:YES]];
                    }
                    [[BSDataManager sharedInstance] addPairWithStartTime:[formatter dateFromString:startTime]
                                                                 endTime:[formatter dateFromString:endTime]
                                                          subgroupNumber:subgroupNumber
                                                            pairTypeName:pairType
                                                              inAuditory:auditory
                                                                   atDay:day
                                                                 subject:subject
                                                                lecturer:lecturer
                                                                   weeks:weekNumbers];
                }
            }
            [[BSDataManager sharedInstance] saveContext];
            NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
            [sharedDefaults setObject:[NSDate date] forKey:kLastUpdate];
            [sharedDefaults setObject:groupNumber forKey:kCurrentScheduleGroup];
            if (success) dispatch_async(dispatch_get_main_queue(), success);
        } else if (failure) {
            dispatch_async(dispatch_get_main_queue(), failure);
        }
    });
}

@end
//
//  BSSubject.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSSubject.h"
#import "BSPair.h"


@implementation BSSubject

@dynamic name;
@dynamic daysSchedule;

@end
//
//  BSWeekNumber.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 17.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSWeekNumber.h"
#import "BSPair.h"


@implementation BSWeekNumber

@dynamic weekNumber;
@dynamic pairs;

@end
//
//  BSLecturerVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 04.12.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSLecturerVC.h"
#import "UIView+Screenshot.h"

@interface BSLecturerVC ()
@property (strong, nonatomic) IBOutlet UIImageView *lecturerIV;
@property (strong, nonatomic) IBOutlet UILabel *lecturerNameLabel;
@property (strong, nonatomic) IBOutlet UIImageView *backIV;
@property (strong, nonatomic) IBOutlet UIView *centerView;

@property (strong, nonatomic) UIImageView *previewIV;
@property (strong, nonatomic) BSLecturer *lecturer;
@property (assign, nonatomic) CGRect startFrame;

@property (nonatomic, assign) CGRect originalBounds;
@property (nonatomic, assign) CGPoint originalCenter;

@property (nonatomic) UIDynamicAnimator *animator;
@property (nonatomic) UIAttachmentBehavior *attachmentBehavior;
@property (nonatomic) UIPushBehavior *pushBehavior;
@property (nonatomic) UIDynamicItemBehavior *itemBehavior;

@property (assign, nonatomic) BOOL dismissing;
@end

@implementation BSLecturerVC
- (instancetype)initWithLecturer:(BSLecturer*)lecturer startFrame:(CGRect)startFrame
{
    self = [super initWithNibName:NSStringFromClass([BSLecturerVC class]) bundle:nil];
    if (self) {
        self.lecturer = lecturer;
        self.startFrame = startFrame;
    }
    return self;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    self.backIV.image = [[[UIApplication sharedApplication] keyWindow] bluredScreenshot];
    self.lecturerIV.image = [self.lecturer thumbnail];
    self.lecturerNameLabel.text = [NSString stringWithFormat:@"%@ %@ %@",self.lecturer.lastName, self.lecturer.firstName, self.lecturer.middleName];
    
    self.previewIV = [[UIImageView alloc] initWithFrame:self.startFrame];
    self.previewIV.image = [self.lecturer thumbnail];
    self.previewIV.contentMode = UIViewContentModeScaleAspectFill;
    self.previewIV.layer.cornerRadius = self.previewIV.frame.size.width / 2.0;
    self.previewIV.layer.masksToBounds = YES;
    [self.view addSubview:self.previewIV];
    
    self.animator = [[UIDynamicAnimator alloc] initWithReferenceView:self.view];
}

#define HORISONTAL_OFFSET 20.0
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    self.backIV.alpha = 0.0;
    self.centerView.alpha = 0.0;
    UIWindow *frontWindow = [[UIApplication sharedApplication] keyWindow];
    CGRect centerViewFrame = self.centerView.frame;
    CGFloat newWidth = CGRectGetWidth(frontWindow.frame) - 2*HORISONTAL_OFFSET;
    centerViewFrame.size.height *= (newWidth / centerViewFrame.size.width);
    centerViewFrame.size.width = newWidth;
    self.centerView.frame = centerViewFrame;
    self.centerView.center = CGPointMake(frontWindow.frame.size.width / 2.0, frontWindow.frame.size.height / 2.0);
}

#define LECTURER_VC_ANIMATION_DURATION 0.3
#define LECTURER_NAME_ANIMATION_DURATION 0.2
- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    [self showCenterView];
    self.originalBounds = self.centerView.bounds;
    self.originalCenter = self.centerView.center;

}
- (void)showCenterView {

    [UIView animateWithDuration:LECTURER_VC_ANIMATION_DURATION animations:^{
        self.previewIV.frame = [self.view convertRect:self.lecturerIV.frame fromView:self.centerView];
        self.previewIV.layer.cornerRadius = 0.0;
        self.backIV.alpha = 1.0;
    } completion:^(BOOL finished) {
        [UIView animateWithDuration:LECTURER_NAME_ANIMATION_DURATION animations:^{
            self.centerView.alpha = 1.0;
        } completion:^(BOOL finished) {
            [self.previewIV removeFromSuperview];
        }];
    }];
}

- (void)dismiss {
    if (!self.dismissing) {
        self.dismissing = YES;
        [UIView animateWithDuration:LECTURER_VC_ANIMATION_DURATION animations:^{
            self.view.alpha = 0.0;
        } completion:^(BOOL finished) {
            [self dismissViewControllerAnimated:NO completion:nil];
        }];
    }
}

//===============================================GUSETURE RECOGNISER===========================================
#pragma mark - Guesture recogniser

static const CGFloat ThrowingThreshold = 5000;
static const CGFloat ThrowingVelocityPadding = 35;

- (IBAction) handleTapGesture:(UITapGestureRecognizer*)gesture {
    [self dismiss];
}

- (IBAction) handleAttachmentGesture:(UIPanGestureRecognizer*)gesture
{
    CGPoint location = [gesture locationInView:self.view];
    CGPoint boxLocation = [gesture locationInView:self.centerView];

    switch (gesture.state) {
        case UIGestureRecognizerStateBegan:{
            [self.view removeConstraints:self.centerView.constraints];
            [self.view setNeedsDisplay];
            [self.animator removeAllBehaviors];
            UIOffset centerOffset = UIOffsetMake(boxLocation.x - CGRectGetMidX(self.centerView.bounds),
                                                 boxLocation.y - CGRectGetMidY(self.centerView.bounds));
            self.attachmentBehavior = [[UIAttachmentBehavior alloc] initWithItem:self.centerView
                                                                offsetFromCenter:centerOffset
                                                                attachedToAnchor:location];
            [self.animator addBehavior:self.attachmentBehavior];
            break;
        }
        case UIGestureRecognizerStateEnded: {
            [self.animator removeBehavior:self.attachmentBehavior];
             
             //1
             CGPoint velocity = [gesture velocityInView:self.view];
             CGFloat magnitude = sqrtf((velocity.x * velocity.x) + (velocity.y * velocity.y));
             magnitude *= 3;
             if (magnitude > ThrowingThreshold) {
                 //2
                 UIPushBehavior *pushBehavior = [[UIPushBehavior alloc]
                                                 initWithItems:@[self.centerView]
                                                 mode:UIPushBehaviorModeInstantaneous];
                 pushBehavior.pushDirection = CGVectorMake((velocity.x ) , (velocity.y ));
                 pushBehavior.magnitude = magnitude / ThrowingVelocityPadding;
                 __weak typeof(self) weakSelf = self;
                 pushBehavior.action = ^{
                     typeof(weakSelf) self = weakSelf;
                     CGFloat minX = 0.0;
                     CGFloat maxX = CGRectGetMaxX(self.view.frame);
                     CGFloat minY = 0.0;
                     CGFloat maxY = CGRectGetMaxY(self.view.frame);
                     CGPoint centerCenter = self.centerView.center;
                     BOOL inView = (minX < centerCenter.x && maxX > centerCenter.x) && (minY < centerCenter.y && maxY > centerCenter.y);
                     if (!inView) {
                         [self dismiss];
                     }
                 };
                 self.pushBehavior = pushBehavior;
                 [self.animator addBehavior:self.pushBehavior];
                 NSLog(@"magn : %f vx: %f vy: %f", magnitude, velocity.x, velocity.y);
                 
                 CGPoint center = CGPointMake(self.centerView.bounds.size.width / 2.0, self.centerView.bounds.size.width / 2.0);
                 CGPoint location = [gesture locationInView:self.centerView];
                 location.x -= center.x;
                 location.y -= center.y;
                 CGFloat locMod = sqrtf(location.x * location.x + location.y * location.y);
                 CGPoint velPoint = CGPointMake(location.x + velocity.x - center.x, location.y + velocity.y - center.y);

                 CGFloat space = (velPoint.y*(location.x - velPoint.x) - velPoint.x*(location.y - velPoint.y))/ 2.0;
                 
                 CGFloat angularVelocity =  space / 25000.0;
                 
                 self.itemBehavior = [[UIDynamicItemBehavior alloc] initWithItems:@[self.centerView]];
                 self.itemBehavior.friction = 0.2;
                 self.itemBehavior.allowsRotation = YES;
                 [self.itemBehavior addAngularVelocity:angularVelocity forItem:self.centerView];
                 [self.animator addBehavior:self.itemBehavior];
                 
                 [self performSelector:@selector(resetDemo) withObject:nil afterDelay:0.4];
             }
             
             else {
                 [self resetDemo];
             }
            break;
        }
        default:
            [self.attachmentBehavior setAnchorPoint:[gesture locationInView:self.view]];
            break;
    }
}

- (void)resetDemo
{
    [self.animator removeAllBehaviors];
    
    [UIView animateWithDuration:0.45 animations:^{
        self.centerView.bounds = self.originalBounds;
        self.centerView.center = self.originalCenter;
        self.centerView.transform = CGAffineTransformIdentity;
    }];
}

- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}
@end
//
//  BSPairCell.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 18.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSPairCell.h"
#import "BSTriangleView.h"
#import "NSDate+Compare.h"

@interface BSPairCell()
@property (strong, nonatomic) IBOutlet UILabel *timeLabel;
@property (strong, nonatomic) IBOutlet BSTriangleView *triangleView;
@property (strong, nonatomic) IBOutlet UIView *pairTypeIndicator;
@property (strong, nonatomic) IBOutlet UILabel *subjectNameLabel;
@property (strong, nonatomic) IBOutlet UILabel *auditoryLabel;
@property (strong, nonatomic) IBOutlet UIView *pairView;
@property (strong, nonatomic) IBOutlet UILabel *lecturerNameLabel;

@property (strong, nonatomic) UIVisualEffectView *effectView;
@property (strong, nonatomic) NSString *timeText;
@end
@implementation BSPairCell
@dynamic timeText;

#define CORNER_RADIUS 0.0
- (void)awakeFromNib {
    self.backgroundColor = [UIColor clearColor];
    
    [self.lecturerIV.layer setCornerRadius:self.lecturerIV.bounds.size.width / 2.0];
    self.lecturerIV.layer.masksToBounds = YES;
    
    [self.pairView.layer setCornerRadius:CORNER_RADIUS];
    self.pairView.layer.masksToBounds = YES;
    
    self.showingLecturerName = NO;
    
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleThumbnailTap:)];
    [self addGestureRecognizer:tap];
}

#define OFFSET 10.0
#define PAIR_CELL_ANIMATION_DURATION 0.3
- (void)makeSelected:(BOOL)selected {
    if (self.lecturerNameLabel.hidden || [self.lecturerNameLabel.text isEqual:@""]) {
        return;
    }
    CGRect lecturerIVFrame = self.lecturerIV.frame;
    CGRect lecturerNameFrame = self.lecturerNameLabel.frame;

    if (selected) {
        lecturerIVFrame.origin.x = CGRectGetMaxX(self.timeLabel.frame) + OFFSET;
        CGRect nearFrame = (self.lecturerIV.hidden) ? self.timeLabel.frame : lecturerIVFrame;
        lecturerNameFrame.origin.x = CGRectGetMaxX(nearFrame) + OFFSET;
    } else {
        lecturerIVFrame.origin.x = CGRectGetMaxX(self.pairView.frame) - OFFSET - CGRectGetWidth(lecturerIVFrame);
        lecturerNameFrame.origin.x = CGRectGetMaxX(self.pairView.frame) + OFFSET;
    }

    CGFloat rotateAngelPart = ((self.showingLecturerName) ? 1 : -1)*2*M_PI/3.0;
    
    [UIView beginAnimations:@"lecturer IV animations 1" context:nil];
    [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
    self.lecturerIV.transform = CGAffineTransformMakeRotation(rotateAngelPart);
    [UIView commitAnimations];

    [UIView beginAnimations:@"lecturer IV animations 2" context:nil];
    [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
    self.lecturerIV.transform = CGAffineTransformMakeRotation(2*rotateAngelPart);
    [UIView commitAnimations];

    [UIView beginAnimations:@"lecturer IV animations 3" context:nil];
    [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
    self.lecturerIV.transform = CGAffineTransformMakeRotation(3*rotateAngelPart);
    [UIView commitAnimations];

    [UIView beginAnimations:@"Movement animations" context:nil];
    [UIView setAnimationDuration:PAIR_CELL_ANIMATION_DURATION];
    self.lecturerIV.frame = lecturerIVFrame;
    self.lecturerNameLabel.frame = lecturerNameFrame;
    self.subjectNameLabel.alpha = (selected) ? 0.0 : 1.0;
    self.auditoryLabel.alpha = (selected) ? 0.0 : 1.0;
    
    [UIView commitAnimations];
    self.showingLecturerName = selected;
}


- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated {}
- (void)setSelected:(BOOL)selected animated:(BOOL)animated {}

- (NSString*)timeText {
    return [self.timeLabel.attributedText string];
}

#define LINE_HEIGHT 16.0
#define FONT_SIZE 16.0
- (void)setTimeText:(NSString *)timeText {
    NSMutableAttributedString* attrTimeString = [[NSMutableAttributedString alloc] initWithString:timeText];
    NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
    [style setMaximumLineHeight:LINE_HEIGHT];
    [style setAlignment:NSTextAlignmentCenter];
    [attrTimeString addAttribute:NSParagraphStyleAttributeName
                       value:style
                       range:NSMakeRange(0, [timeText length])];

    [attrTimeString addAttribute:NSFontAttributeName
                           value:[UIFont fontWithName:@"OpenSans-Light" size:FONT_SIZE]
                           range:NSMakeRange(0, [timeText length])];
    self.timeLabel.attributedText = attrTimeString;
}


- (void)setPairTypeIndicatorColor:(UIColor *)pairTypeIndicatorColor{
    _pairTypeIndicatorColor = pairTypeIndicatorColor;
    self.pairTypeIndicator.backgroundColor = pairTypeIndicatorColor;
    self.triangleView.fillColor = pairTypeIndicatorColor;
}

- (void)setupWithPair:(BSPair*)pair inDay:(BSDayWithWeekNum *)day{
    
    
    BSLecturer *lecturer = pair.lecturer;
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"HH:mm"];
    NSString *timeString = [NSString stringWithFormat:@"%@\n-\n%@", [formatter stringFromDate:pair.startTime],[formatter stringFromDate:pair.endTime]];
    [self setTimeText:timeString];
    [self.subjectNameLabel setText:pair.subject.name];
    [self.auditoryLabel setText:pair.auditory.address];
    UIImage *thumbnail = [lecturer thumbnail];
    [self.lecturerIV setImage:thumbnail];
    self.lecturerIV.hidden = thumbnail == nil;
    CGRect subjectNameFrame = self.subjectNameLabel.frame;
    subjectNameFrame.size.width = CGRectGetMaxX(self.frame) - subjectNameFrame.origin.x - OFFSET;
    if (thumbnail != nil) {
        subjectNameFrame.size.width -= (CGRectGetWidth(self.lecturerIV.frame) + OFFSET);
    }
    self.lecturerNameLabel.hidden = lecturer == nil;
    self.subjectNameLabel.frame = subjectNameFrame;
    
    if (lecturer) {
        [self.lecturerNameLabel setText:[NSString stringWithFormat:@"%@ %@.%@.",
                                         lecturer.lastName,
                                         [lecturer.firstName substringToIndex:1],
                                         [lecturer.middleName substringToIndex:1]]];
    }
    
    self.pairTypeIndicatorColor = [pair colorForPairType];
    [self setupTriangleForPair:pair inDay:day];
}

- (void)setupTriangleForPair:(BSPair*)pair inDay:(BSDayWithWeekNum*)day {
    NSDate *now = [NSDate date];
    BOOL cellForCurrentDay = [now isEqualToDateWithoutTime:day.date];
    
    NSDate *startOfTimeInterval = pair.startTime;
    NSDate *endOfTimeInterval = pair.endTime;
    NSDate *startOfTimeIntervalWithOffset = pair.startTime;
    NSDate *endOfTimeIntervalWithOffset = pair.endTime;
    NSInteger currentPairIndex = [day.pairs indexOfObject:pair];
    NSTimeInterval pairLength = fabs([[pair.endTime onlyTime] timeIntervalSinceDate:[pair.startTime onlyTime]]);
    NSTimeInterval indicatorTimeLength = pairLength * CGRectGetHeight(self.triangleView.bounds)/(2.0* CGRectGetHeight(self.bounds));
    if (currentPairIndex != 0) { //not first
        startOfTimeInterval = [[day.pairs objectAtIndex:currentPairIndex-1] endTime];
        startOfTimeIntervalWithOffset = [startOfTimeIntervalWithOffset dateByAddingTimeInterval:-indicatorTimeLength];
    }
    if (currentPairIndex != [day.pairs count] - 1) { // not last
        endOfTimeInterval = [[day.pairs objectAtIndex:currentPairIndex+1] startTime];
        endOfTimeIntervalWithOffset = [endOfTimeIntervalWithOffset dateByAddingTimeInterval:indicatorTimeLength];
    }
    BOOL showIndicator = [now isTimeBetweenTime:startOfTimeIntervalWithOffset andTime:endOfTimeIntervalWithOffset] && cellForCurrentDay;
    if (showIndicator) {
        CGFloat triangleOriginrY = -CGRectGetHeight(self.triangleView.bounds);
        if ([now isTimeBetweenTime:startOfTimeInterval andTime:pair.startTime]) {
            triangleOriginrY = -self.triangleView.bounds.size.height / 2.0;
        } else if ([now isTimeBetweenTime:pair.endTime andTime:endOfTimeInterval]) {
            triangleOriginrY = CGRectGetHeight(self.frame) - 2 - self.triangleView.bounds.size.height / 2.0;
        } else {
            NSTimeInterval firstBreak = fabs([[pair.startTime onlyTime] timeIntervalSinceDate:[startOfTimeInterval onlyTime]]);
            NSTimeInterval secondBreak = fabs([[pair.endTime onlyTime] timeIntervalSinceDate:[endOfTimeInterval onlyTime]]);
            NSTimeInterval intervalLength = pairLength + 2*indicatorTimeLength ;
            NSTimeInterval timePassed = fabs([[now onlyTime] timeIntervalSinceDate:[[startOfTimeInterval dateByAddingTimeInterval:-indicatorTimeLength] onlyTime]]);
            if ([now compareTime:pair.startTime] == NSOrderedDescending) {
                timePassed -= firstBreak;
            }
            if ([now compareTime:pair.endTime] == NSOrderedDescending) {
                timePassed -= secondBreak;
            }
            triangleOriginrY += (CGRectGetHeight(self.frame) - 2 + CGRectGetHeight(self.triangleView.bounds))* (CGFloat)timePassed / intervalLength;
            
        }
        CGRect triangleFrame = self.triangleView.frame;
        triangleFrame.origin.y = triangleOriginrY;
        self.triangleView.frame = triangleFrame;
        self.triangleView.hidden = NO;
        [self.triangleView setNeedsDisplay];
    } else {
        self.triangleView.hidden = YES;
    }

}

- (void)updateUIForWidget {
    self.timeLabel.textColor = [UIColor whiteColor];
    self.subjectNameLabel.textColor = [UIColor whiteColor];
    self.auditoryLabel.textColor = [UIColor whiteColor];
    self.backgroundColor = [UIColor clearColor];
    self.pairView.backgroundColor = [UIColor clearColor];
    if (!self.effectView) {
        UIVisualEffect *blur = [UIBlurEffect effectWithStyle:UIBlurEffectStyleLight];
        self.effectView = [[UIVisualEffectView alloc] initWithEffect:blur];
        self.effectView.frame = self.pairView.bounds;
        [self.pairView addSubview:self.effectView];
        [self.pairView sendSubviewToBack:self.effectView];
    }
}

- (void)handleThumbnailTap:(id)sender {
    [self.delegate thumbnailGetTappedOnCell:self];
}
@end
//
//  ViewController.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 16.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSScheduleVC.h"
#import "BSConstants.h"
#import "BSDataManager.h"
#import "BSPairCell.h"
#import "BSDayWithWeekNum.h"

#import "BSLecturer+Thumbnail.h"
#import "NSString+Transiterate.h"
#import "NSDate+Compare.h"
#import "UIView+Screenshot.h"

#import "BSSettingsVC.h"
#import "BSScheduleParser.h"
#import "BSLecturerVC.h"
#import "NSUserDefaults+Share.h"

static NSString * const kCellID = @"Pair cell id";


@interface BSScheduleVC () <UITableViewDataSource, UITableViewDelegate, NSFetchedResultsControllerDelegate,
BSSettingsVCDelegate, BSPairCellDelegate>

@property (strong, nonatomic) IBOutlet UITableView *tableView;
@property (strong, nonatomic) NSMutableArray *daysWithWeekNumber;

@property (strong, nonatomic) UIView *loadindicatorView;
@property (strong, nonatomic) BSDayWithWeekNum *dayToHighlight;
@end

@implementation BSScheduleVC

- (instancetype)init
{
    self = [super initWithNibName:NSStringFromClass([self class]) bundle:nil];
    if (self) {
    }
    return self;
}
- (UIView*)loadindicatorView {
    if (!_loadindicatorView) {
        _loadindicatorView = [[UIView alloc] initWithFrame:self.navigationController.view.bounds];
        _loadindicatorView.backgroundColor = [UIColor blackColor];
        UIActivityIndicatorView *activityIndicator = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
        activityIndicator.center = CGPointMake(_loadindicatorView.bounds.size.width / 2.0, _loadindicatorView.bounds.size.height / 2.0);
        [_loadindicatorView addSubview:activityIndicator];
        [activityIndicator startAnimating];
    }
    return _loadindicatorView;
}

- (NSMutableArray*)daysWithWeekNumber {
    if (!_daysWithWeekNumber) {
        _daysWithWeekNumber = [NSMutableArray array];
    }
    return _daysWithWeekNumber;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = NSLocalizedString(@"L_Schedule", nil);
    
    [self.navigationController.navigationBar setBarTintColor:BS_BLUE];
    UIFont *titleFont = [UIFont fontWithName:@"OpenSans" size:20.0f];
    [self.navigationController.navigationBar setTitleTextAttributes:@{NSForegroundColorAttributeName : [UIColor whiteColor],
                                                                      NSFontAttributeName: titleFont}];
    self.navigationController.navigationBar.barStyle = UIBarStyleBlack;
    
    UIBarButtonItem *settingsButton = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"tools"] style:UIBarButtonItemStylePlain target:self action:@selector(showSettingsScreen)];
    settingsButton.tintColor = [UIColor whiteColor];
    self.navigationItem.leftBarButtonItem = settingsButton;
    
    self.tableView.contentInset = UIEdgeInsetsMake(0, 0, 100, 0);
    [self.tableView registerNib:[UINib nibWithNibName:NSStringFromClass([BSPairCell class]) bundle:nil] forCellReuseIdentifier:kCellID];
    [self getScheduleData];
}

- (void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
    if (![sharedDefaults objectForKey:kUserSubgroup]) {
        [self showSettingsScreen];
    }
}

- (void)getScheduleData {
    NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
    NSString *groupNumber = [sharedDefaults objectForKey:kUserGroup];
    if (groupNumber) {
        if ([BSScheduleParser scheduleNeedUpdateForGroup:groupNumber]) {
            [self showLoadingView];
            [BSScheduleParser scheduleForGroupNumber:groupNumber withSuccess:^{
                [self updateSchedule];
            } failure:^{
                [self hideLoadingView];
                NSString *errorMessage = NSLocalizedString(@"L_LoadError", nil);
                NSString *errorTitle = NSLocalizedString(@"L_Error", nil);
                NSString *okButtonTitle = NSLocalizedString(@"L_Ok", nil);
                if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"8.0")) {
                    UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:errorTitle
                                                                                     message:errorMessage
                                                                              preferredStyle:UIAlertControllerStyleAlert];
                    UIAlertAction *okAction = [UIAlertAction actionWithTitle:okButtonTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
                        [self dismissViewControllerAnimated:YES completion:nil];
                    }];
                    [alertVC addAction:okAction];
                    [self presentViewController:alertVC animated:YES completion:nil];
                } else {
                    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:errorTitle
                                                                    message:errorMessage
                                                                   delegate:nil
                                                          cancelButtonTitle:okButtonTitle otherButtonTitles: nil];
                    [alert show];
                }
            }];
        } else {
            [self updateSchedule];
        }
    }
}

- (void)updateSchedule {
    [self hideLoadingView];
    self.dayToHighlight = [[BSDataManager sharedInstance] dayToHighlight];
    
    self.daysWithWeekNumber = nil;
    
    [self loadScheduleForDaysCount:PREVIOUS_DAY_COUNT backwards:YES];
    [self loadScheduleForDaysCount:DAYS_LOAD_STEP backwards:NO];
    
    [self.tableView reloadData];
    NSInteger highlightedSectionIndex = 0;
    for (NSInteger index = 0; index < [self.daysWithWeekNumber count]; index++) {
        BSDayWithWeekNum *dayWithWeekNum = [self.daysWithWeekNumber objectAtIndex:index];
        if ([dayWithWeekNum isEqual:self.dayToHighlight]) {
            highlightedSectionIndex = index;
            break;
        }
    }

    [self.tableView scrollToRowAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:highlightedSectionIndex]
                          atScrollPosition:UITableViewScrollPositionTop
                                  animated:YES];
}

- (void)loadScheduleForDaysCount:(NSInteger)daysCount backwards:(BOOL)backwards {
    NSDate *now = [NSDate date];
    NSDate *dayDate = now; // to show two previous days
    if ([self.daysWithWeekNumber count] > 0) {
        if (backwards) {
            dayDate = [[self.daysWithWeekNumber firstObject] date];
        } else {
            dayDate = [[[self.daysWithWeekNumber lastObject] date] dateByAddingTimeInterval:DAY_IN_SECONDS];
        }
    }
    NSInteger daysAdded = 0;
    while (daysAdded < daysCount) {
        BSDayWithWeekNum *dayWithWeekNum = [[BSDayWithWeekNum alloc] initWithDate:dayDate];
        if (dayWithWeekNum.dayOfWeek && [[dayWithWeekNum pairs] count] > 0 && !([dayDate isEqual:now] && backwards)) {
            if (backwards) {
                [self.daysWithWeekNumber insertObject:dayWithWeekNum atIndex:0];
            } else {
                [self.daysWithWeekNumber addObject:dayWithWeekNum];

            }
            daysAdded++;
        }
        dayDate = [dayDate dateByAddingTimeInterval:(backwards ? -1 : 1)*DAY_IN_SECONDS];
    }
}

- (NSURL *)applicationDocumentsDirectory {
    // The directory the application uses to store the Core Data store file. This code uses a directory named "com.saute.Bsuir_Schedule" in the application's documents directory.
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}

//===============================================TABLE VIEW===========================================
#pragma mark - Table View


- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return [self.daysWithWeekNumber count];
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [[[self.daysWithWeekNumber objectAtIndex:section] pairs] count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    BSPairCell *cell = [tableView dequeueReusableCellWithIdentifier:kCellID forIndexPath:indexPath];
    BSDayWithWeekNum *dayWithWeekNum = [self.daysWithWeekNumber objectAtIndex:indexPath.section];
    NSArray *pairs = [dayWithWeekNum pairs];
    BSPair *pair = [pairs objectAtIndex:indexPath.row];
    cell.delegate = self;
    [cell setupWithPair:pair inDay:dayWithWeekNum];
    return cell;
}

-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    BSDayWithWeekNum *dayWithWeekNum = [self.daysWithWeekNumber objectAtIndex:section];
    NSDate *now = [NSDate date];
    BOOL currentDay = [now isEqualToDateWithoutTime:dayWithWeekNum.date];
    BOOL tomorrow = [[now dateByAddingTimeInterval:DAY_IN_SECONDS] isEqualToDateWithoutTime:dayWithWeekNum.date];
    
    NSDateFormatter *df = [[NSDateFormatter alloc] init];
    [df setDateFormat:@"dd.MM.YY"];
    
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, tableView.frame.size.width, HEADER_HEIGHT)];
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(HEADER_LABEL_OFFSET_X, HEADER_LABEL_OFFSET_Y,
                                                               tableView.frame.size.width, HEADER_HEIGHT)];
    [label setFont:[UIFont fontWithName:@"OpenSans" size:HEADER_LABEL_FONT_SIZE]];

    [label setTextColor:BS_GRAY];
    [view addSubview:label];
    [view setBackgroundColor:[UIColor clearColor]];
    
    NSString *dayInfoString = [NSString stringWithFormat:@"%@  %@  %@  %@",
                               NSLocalizedString([dayWithWeekNum.dayOfWeek name], nil),
                               [df stringFromDate:dayWithWeekNum.date],
                               NSLocalizedString(@"L_Week", nil),
                               dayWithWeekNum.weekNumber.weekNumber];
    if ([dayWithWeekNum isEqual:self.dayToHighlight]) {
        if (currentDay) {
            dayInfoString = [NSString stringWithFormat:@"(%@)  %@",NSLocalizedString(@"L_Today", nil), dayInfoString];
        } else if (tomorrow) {
            dayInfoString = [NSString stringWithFormat:@"(%@)  %@",NSLocalizedString(@"L_Tomorrow", nil), dayInfoString];
        }
        [label setTextColor:BS_RED];
    }
    [label setText:dayInfoString];
    return view;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return HEADER_HEIGHT+5.0;
}
//-------------------------------Scroll view---------------------------------

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate
{
    if (!decelerate) {
        [self scrollingFinishScrollView:scrollView];
    }
}
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    [self scrollingFinishScrollView:scrollView];
}
- (void)scrollingFinishScrollView:(UIScrollView*)scrollView {
    if (scrollView.contentOffset.y >= (scrollView.contentSize.height - scrollView.bounds.size.height)) {
        NSLog(@"load more rows");
        [self loadScheduleForDaysCount:DAYS_LOAD_STEP backwards:NO];
        NSIndexSet *indexSet = [NSIndexSet indexSetWithIndexesInRange:NSMakeRange(self.daysWithWeekNumber.count - DAYS_LOAD_STEP, DAYS_LOAD_STEP)];
        [self.tableView insertSections:indexSet withRowAnimation:UITableViewRowAnimationBottom];
    }
    
}

//-------------------------------Lecturer name view---------------------------------


//- (void)deselectVisibleCells {
//    for (BSPairCell *pairCell in [self.tableView visibleCells]) {
//        if (pairCell.showingLecturerName) {
//            [pairCell makeSelected:NO];
//        }
//    }
//}
//
//- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
//    BSPairCell *pairCell = (BSPairCell*)[tableView cellForRowAtIndexPath:indexPath];
//    if (pairCell) {
//        if (!pairCell.showingLecturerName) {
//            [self deselectVisibleCells];
//        }
//        [pairCell makeSelected:!pairCell.showingLecturerName];
//    }
//}
//
//- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView {
//    [self deselectVisibleCells];
//}

//===============================================UI===========================================
#pragma mark - UI

- (void)showSettingsScreen {
    BSSettingsVC *settingsVC = [[BSSettingsVC alloc] init];
    [self presentVCInCurrentContext:settingsVC];
    settingsVC.delegate = self;

}

- (void)showLecturerVCForLecturer:(BSLecturer*)lecturer withStartFrame:(CGRect)startFrame{
    if (lecturer) {
        BSLecturerVC *lecturerVC = [[BSLecturerVC alloc] initWithLecturer:lecturer startFrame:startFrame];
        [self presentVCInCurrentContext:lecturerVC];
    }
}

- (void)presentVCInCurrentContext:(UIViewController*)vc {
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"8.0")) {
        vc.modalPresentationStyle = UIModalPresentationOverFullScreen;
    } else {
        self.navigationController.modalPresentationStyle = UIModalPresentationCurrentContext;
    }
    [self presentViewController:vc animated:NO completion:nil];
}

//===============================================SETTINGS SCREEN DELEAGTE===========================================
#pragma mark - Settings screen delegate 

- (void)settingsScreen:(BSSettingsVC *)settingsVC dismissWithChanges:(BOOL)changes {
    if (changes) {
        [self getScheduleData];
    }
}

//===============================================LOADING SCREEN===========================================
#pragma mark - Loading screen
- (void)showLoadingView {
    [self.navigationController.view addSubview:self.loadindicatorView];
    self.loadindicatorView.alpha = 0;
    [UIView animateWithDuration:ANIMATION_DURATION animations:^{
        self.loadindicatorView.alpha = 0.5;
    }];
}

- (void)hideLoadingView {
    [UIView animateWithDuration:ANIMATION_DURATION animations:^{
        self.loadindicatorView.alpha = 0.0;
    } completion:^(BOOL finished) {
        if (finished) {
            [self.loadindicatorView removeFromSuperview];
        }
    }];
}
//===============================================BSPairCell DELEGATE===========================================
#pragma mark - BSPairCell delegate

- (void)thumbnailGetTappedOnCell:(BSPairCell *)cell {
    NSIndexPath *indexPathOfCell = [self.tableView indexPathForCell:cell];
    if (indexPathOfCell) {
        BSDayWithWeekNum *dayWithWeekNum = [self.daysWithWeekNumber objectAtIndex:indexPathOfCell.section];
        BSPair *pair = [dayWithWeekNum.pairs objectAtIndex:indexPathOfCell.row];
        BSLecturer *lecturer = pair.lecturer;
        CGRect startFrame = [self.view convertRect:cell.lecturerIV.frame fromView:cell];
        [self showLecturerVCForLecturer:lecturer withStartFrame:startFrame];
    }
}

@end
//
//  BSSettingsVC.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 20.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSSettingsVC.h"
#import "BSDataManager.h"
#import "BSConstants.h"
#import "UIView+Screenshot.h"
#import "NSUserDefaults+Share.h"

@interface BSSettingsVC ()
@property (strong, nonatomic) IBOutlet UIView *centerView;
@property (strong, nonatomic) IBOutlet UIImageView *backIV;
@property (strong, nonatomic) IBOutlet UITextField *groupNumberTF;
@property (strong, nonatomic) IBOutlet UITextField *subgroupNumberTF;
@property (nonatomic) BOOL dataChanged;

@property (strong, nonatomic) UIDynamicAnimator *animator;
@end

@implementation BSSettingsVC

- (instancetype)init
{
    self = [super initWithNibName:NSStringFromClass([self class]) bundle:nil];
    if (self) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
        
        self.animator = [[UIDynamicAnimator alloc] initWithReferenceView:self.view];
        self.dataChanged = NO;
    }
    return self;
}

#define BORDER_WIDTH 2.0
#define CORNER_RADIUS 5.0
- (void)viewDidLoad {
    [super viewDidLoad];
    self.groupNumberTF.layer.borderWidth = BORDER_WIDTH;
    self.groupNumberTF.layer.cornerRadius = CORNER_RADIUS;
    self.groupNumberTF.layer.borderColor = BS_LIGHT_BLUE.CGColor;
    
    self.subgroupNumberTF.layer.borderWidth = BORDER_WIDTH;
    self.subgroupNumberTF.layer.cornerRadius = BORDER_WIDTH;
    self.subgroupNumberTF.layer.borderColor = BS_LIGHT_BLUE.CGColor;
    
    NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
    [self.groupNumberTF setText:[sharedDefaults objectForKey:kUserGroup]];
    [self.subgroupNumberTF setText:[sharedDefaults objectForKey:kUserSubgroup]];

    self.backIV.image = [[[UIApplication sharedApplication] keyWindow] bluredScreenshot];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self showCenterView];
}

#define ANIMATION_DURATION_SHOW 0.4

- (void)showCenterView {
    CGRect screenBounds = [[UIScreen mainScreen] bounds];
    self.centerView.center = CGPointMake(screenBounds.size.width/2.0,
                                         screenBounds.size.height + self.centerView.frame.size.height / 2.0);
    self.backIV.alpha = 0.0;
    __weak typeof(self) weakSelf = self;
    [UIView animateWithDuration:ANIMATION_DURATION_SHOW delay:0.0 usingSpringWithDamping:1.2 initialSpringVelocity:10 options:UIViewAnimationOptionCurveEaseOut animations:^{
        typeof(weakSelf) self = weakSelf;
        self.backIV.alpha = 1.0;
        self.centerView.center = CGPointMake(screenBounds.size.width/2.0, screenBounds.size.height / 2.0);
    } completion:^(BOOL finished) {
    }];
}

#define SETTINGS_ANIMATION_DURATION 0.5
- (void)dismissWithChanges:(BOOL)changes {
    [self.view endEditing:YES];
    __weak typeof(self) weakSelf = self;

    UIPushBehavior *push = [[UIPushBehavior alloc] initWithItems:@[self.centerView] mode:UIPushBehaviorModeInstantaneous];
    UIGravityBehavior *gravity = [[UIGravityBehavior alloc] initWithItems:@[self.centerView]];
    UIDynamicItemBehavior *di = [[UIDynamicItemBehavior alloc] initWithItems:@[self.centerView]];
    [UIView animateWithDuration:SETTINGS_ANIMATION_DURATION animations:^{
        typeof(weakSelf) self = weakSelf;
        self.backIV.alpha = 0.0;
    } completion:^(BOOL finished) {
        typeof(weakSelf) self = weakSelf;
        if (finished) {
            [self.delegate settingsScreen:self dismissWithChanges:changes];
            [self dismissViewControllerAnimated:NO completion:nil];
        }
    }];
    
    [push setAngle:((changes) ? 0 : M_PI) magnitude:30.0];
    gravity.magnitude = 10.0;
    [di addAngularVelocity:((changes) ? 1 : -1)*5 forItem:self.centerView];

    [self.animator addBehavior:di];
    [self.animator addBehavior:gravity];
    [self.animator addBehavior:push];

}

- (void)shakeView:(UIView*)view amplitude:(CGPoint)amplitude {
    CABasicAnimation *animation = [CABasicAnimation animationWithKeyPath:@"position"];
    [animation setDuration:0.07];
    [animation setRepeatCount:3];
    [animation setAutoreverses:YES];
    [animation setFromValue:[NSValue valueWithCGPoint:
                             CGPointMake([view center].x - amplitude.x, [view center].y - amplitude.y)]];
    [animation setToValue:[NSValue valueWithCGPoint:
                           CGPointMake([view center].x + amplitude.x, [view center].y + amplitude.y)]];
    [[view layer] addAnimation:animation forKey:@"position"];
}

//===============================================ACTIONS===========================================
#pragma mark - Actions

- (BOOL)textFieldShouldReturn:(UITextField *)theTextField {
    if (theTextField == self.subgroupNumberTF) {
        [theTextField resignFirstResponder];
    } else if (theTextField == self.groupNumberTF) {
        [self.subgroupNumberTF becomeFirstResponder];
    }
    return YES;
}

- (IBAction)dismissPressed:(id)sender {
    [self dismissWithChanges:NO];
}
- (IBAction)okPressed:(id)sender {
    if ([self.groupNumberTF.text isEqual:@""] || [self.subgroupNumberTF.text isEqual:@""]) {
        [self shakeView:self.centerView amplitude:CGPointMake(10, 0)];
    } else {
        NSUserDefaults *sharedDefaults = [NSUserDefaults sharedDefaults];
        [sharedDefaults setObject:self.groupNumberTF.text forKey:kUserGroup];
        [sharedDefaults setObject:self.subgroupNumberTF.text forKey:kUserSubgroup];
        [self dismissWithChanges:self.dataChanged];
    }
}

- (IBAction)editingChanged:(id)sender {
    self.dataChanged = YES;
}

- (UIStatusBarStyle)preferredStatusBarStyle {
    return UIStatusBarStyleLightContent;
}


//===============================================KEYBOARD===========================================
#pragma mark - Keyboard
#define SETTINGS_OFFSET 30.0

- (void)keyboardWillShow:(NSNotification*)notification {
    CGRect keyboardFrame = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue];
    CGFloat keyboardAnimationDuration = [[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue];
    CGRect intersection = CGRectIntersection(self.centerView.frame, keyboardFrame);
    __weak typeof(self) weakSelf = self;
    [UIView animateWithDuration:keyboardAnimationDuration animations:^{
        typeof(weakSelf) self = weakSelf;
        CGRect centerViewFrame = self.centerView.frame;
        centerViewFrame.origin.y -= (intersection.size.height + SETTINGS_OFFSET);
        self.centerView.frame = centerViewFrame;
    }];
    
}
- (void)keyboardWillHide:(NSNotification*)notification {
    CGFloat keyboardAnimationDuration = [[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue];
    __weak typeof(self) weakSelf = self;
    [UIView animateWithDuration:keyboardAnimationDuration animations:^{
        weakSelf.centerView.center = self.view.center;
    }];
}

@end
//
//  BSTextField.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 20.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSTextField.h"

@implementation BSTextField

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

- (CGRect)textRectForBounds:(CGRect)bounds {
    return [self editingRectForBounds:bounds];
}
#define INSET 10.0
- (CGRect)editingRectForBounds:(CGRect)bounds {
    return CGRectInset( bounds, INSET, 0);
}

@end
//
//  BSTriangleView.m
//  Bsuir Schedule
//
//  Created by Anton Siliuk on 21.11.14.
//  Copyright (c) 2014 Saute. All rights reserved.
//

#import "BSTriangleView.h"

@implementation BSTriangleView

-(void)drawRect:(CGRect)rect
{
    CGContextRef ctx = UIGraphicsGetCurrentContext();
    
    CGContextBeginPath(ctx);
    CGContextMoveToPoint   (ctx, CGRectGetMinX(rect), CGRectGetMinY(rect));  // top left
    CGContextAddLineToPoint(ctx, CGRectGetMaxX(rect), CGRectGetMidY(rect));  // mid right
    CGContextAddLineToPoint(ctx, CGRectGetMinX(rect), CGRectGetMaxY(rect));  // bottom left
    CGContextClosePath(ctx);
    if (self.fillColor) {
        const CGFloat *components = CGColorGetComponents(self.fillColor.CGColor);
        CGContextSetRGBFillColor(ctx, components[0], components[1], components[2], components[3]);
    }
    CGContextFillPath(ctx);
}

@end
